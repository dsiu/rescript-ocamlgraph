// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Array from "rescript/lib/es6/array.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Random from "rescript/lib/es6/random.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as Pack$RescriptOcamlgraph from "../Pack.bs.js";
import * as Builder$RescriptOcamlgraph from "../Builder.bs.js";
import * as Imperative$RescriptOcamlgraph from "../Imperative.bs.js";
import * as Persistent$RescriptOcamlgraph from "../Persistent.bs.js";

Random.init(1597);

function TestB(B) {
  var test = function (n) {
    var v = $$Array.init(n, B.G.V.create);
    var make = function (_g, _i) {
      while(true) {
        var i = _i;
        var g = _g;
        if (i === n) {
          return g;
        }
        _i = i + 1 | 0;
        _g = Curry._2(B.add_vertex, g, Caml_array.get(v, i));
        continue ;
      };
    };
    var g = make(Curry._1(B.empty, undefined), 0);
    for(var i = 0; i < n; ++i){
      for(var j = 0; j < n; ++j){
        if (Random.bool(undefined)) {
          g = Curry._3(B.add_edge, g, Caml_array.get(v, i), Caml_array.get(v, j));
        }
        
      }
    }
    var counter = {
      contents: 0
    };
    var f = function (x) {
      counter.contents = counter.contents + 1 | 0;
      return x;
    };
    var g$p = Curry._2(B.G.map_vertex, f, g);
    if (counter.contents !== n) {
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "test_map_vertex.res",
              30,
              4
            ],
            Error: new Error()
          };
    }
    if (Curry._1(B.G.nb_vertex, g$p) === n) {
      return ;
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            31,
            4
          ],
          Error: new Error()
        };
  };
  for(var n = 0; n <= 10; ++n){
    test(n);
  }
  return {
          test: test
        };
}

function TestI(G) {
  var B = Builder$RescriptOcamlgraph.I(G);
  var test = function (n) {
    var v = $$Array.init(n, B.G.V.create);
    var make = function (_g, _i) {
      while(true) {
        var i = _i;
        var g = _g;
        if (i === n) {
          return g;
        }
        _i = i + 1 | 0;
        _g = Curry._2(B.add_vertex, g, Caml_array.get(v, i));
        continue ;
      };
    };
    var g = make(Curry._1(B.empty, undefined), 0);
    for(var i = 0; i < n; ++i){
      for(var j = 0; j < n; ++j){
        if (Random.bool(undefined)) {
          g = Curry._3(B.add_edge, g, Caml_array.get(v, i), Caml_array.get(v, j));
        }
        
      }
    }
    var counter = {
      contents: 0
    };
    var f = function (x) {
      counter.contents = counter.contents + 1 | 0;
      return x;
    };
    var g$p = Curry._2(B.G.map_vertex, f, g);
    if (counter.contents !== n) {
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "test_map_vertex.res",
              30,
              4
            ],
            Error: new Error()
          };
    }
    if (Curry._1(B.G.nb_vertex, g$p) === n) {
      return ;
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            31,
            4
          ],
          Error: new Error()
        };
  };
  for(var n = 0; n <= 10; ++n){
    test(n);
  }
  return {
          test: test
        };
}

function TestP(G) {
  var B = Builder$RescriptOcamlgraph.P(G);
  var test = function (n) {
    var v = $$Array.init(n, B.G.V.create);
    var make = function (_g, _i) {
      while(true) {
        var i = _i;
        var g = _g;
        if (i === n) {
          return g;
        }
        _i = i + 1 | 0;
        _g = Curry._2(B.add_vertex, g, Caml_array.get(v, i));
        continue ;
      };
    };
    var g = make(Curry._1(B.empty, undefined), 0);
    for(var i = 0; i < n; ++i){
      for(var j = 0; j < n; ++j){
        if (Random.bool(undefined)) {
          g = Curry._3(B.add_edge, g, Caml_array.get(v, i), Caml_array.get(v, j));
        }
        
      }
    }
    var counter = {
      contents: 0
    };
    var f = function (x) {
      counter.contents = counter.contents + 1 | 0;
      return x;
    };
    var g$p = Curry._2(B.G.map_vertex, f, g);
    if (counter.contents !== n) {
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "test_map_vertex.res",
              30,
              4
            ],
            Error: new Error()
          };
    }
    if (Curry._1(B.G.nb_vertex, g$p) === n) {
      return ;
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            31,
            4
          ],
          Error: new Error()
        };
  };
  for(var n = 0; n <= 10; ++n){
    test(n);
  }
  return {
          test: test
        };
}

var compare = Caml_obj.caml_compare;

var equal = Caml_obj.caml_equal;

function hash(x) {
  return x;
}

var Int = {
  compare: compare,
  equal: equal,
  hash: hash,
  $$default: 42
};

var G_V = Pack$RescriptOcamlgraph.Digraph.V;

var G_E = Pack$RescriptOcamlgraph.Digraph.E;

var G_is_directed = Pack$RescriptOcamlgraph.Digraph.is_directed;

var G_is_empty = Pack$RescriptOcamlgraph.Digraph.is_empty;

var G_nb_vertex = Pack$RescriptOcamlgraph.Digraph.nb_vertex;

var G_nb_edges = Pack$RescriptOcamlgraph.Digraph.nb_edges;

var G_out_degree = Pack$RescriptOcamlgraph.Digraph.out_degree;

var G_in_degree = Pack$RescriptOcamlgraph.Digraph.in_degree;

var G_mem_vertex = Pack$RescriptOcamlgraph.Digraph.mem_vertex;

var G_mem_edge = Pack$RescriptOcamlgraph.Digraph.mem_edge;

var G_mem_edge_e = Pack$RescriptOcamlgraph.Digraph.mem_edge_e;

var G_find_edge = Pack$RescriptOcamlgraph.Digraph.find_edge;

var G_find_all_edges = Pack$RescriptOcamlgraph.Digraph.find_all_edges;

var G_succ = Pack$RescriptOcamlgraph.Digraph.succ;

var G_pred = Pack$RescriptOcamlgraph.Digraph.pred;

var G_succ_e = Pack$RescriptOcamlgraph.Digraph.succ_e;

var G_pred_e = Pack$RescriptOcamlgraph.Digraph.pred_e;

var G_iter_vertex = Pack$RescriptOcamlgraph.Digraph.iter_vertex;

var G_fold_vertex = Pack$RescriptOcamlgraph.Digraph.fold_vertex;

var G_iter_edges = Pack$RescriptOcamlgraph.Digraph.iter_edges;

var G_fold_edges = Pack$RescriptOcamlgraph.Digraph.fold_edges;

var G_iter_edges_e = Pack$RescriptOcamlgraph.Digraph.iter_edges_e;

var G_fold_edges_e = Pack$RescriptOcamlgraph.Digraph.fold_edges_e;

var G_map_vertex = Pack$RescriptOcamlgraph.Digraph.map_vertex;

var G_iter_succ = Pack$RescriptOcamlgraph.Digraph.iter_succ;

var G_iter_pred = Pack$RescriptOcamlgraph.Digraph.iter_pred;

var G_fold_succ = Pack$RescriptOcamlgraph.Digraph.fold_succ;

var G_fold_pred = Pack$RescriptOcamlgraph.Digraph.fold_pred;

var G_iter_succ_e = Pack$RescriptOcamlgraph.Digraph.iter_succ_e;

var G_fold_succ_e = Pack$RescriptOcamlgraph.Digraph.fold_succ_e;

var G_iter_pred_e = Pack$RescriptOcamlgraph.Digraph.iter_pred_e;

var G_fold_pred_e = Pack$RescriptOcamlgraph.Digraph.fold_pred_e;

var G_create = Pack$RescriptOcamlgraph.Digraph.create;

var G_clear = Pack$RescriptOcamlgraph.Digraph.clear;

var G_copy = Pack$RescriptOcamlgraph.Digraph.copy;

var G_add_vertex = Pack$RescriptOcamlgraph.Digraph.add_vertex;

var G_remove_vertex = Pack$RescriptOcamlgraph.Digraph.remove_vertex;

var G_add_edge = Pack$RescriptOcamlgraph.Digraph.add_edge;

var G_add_edge_e = Pack$RescriptOcamlgraph.Digraph.add_edge_e;

var G_remove_edge = Pack$RescriptOcamlgraph.Digraph.remove_edge;

var G_remove_edge_e = Pack$RescriptOcamlgraph.Digraph.remove_edge_e;

var G = {
  V: G_V,
  E: G_E,
  is_directed: G_is_directed,
  is_empty: G_is_empty,
  nb_vertex: G_nb_vertex,
  nb_edges: G_nb_edges,
  out_degree: G_out_degree,
  in_degree: G_in_degree,
  mem_vertex: G_mem_vertex,
  mem_edge: G_mem_edge,
  mem_edge_e: G_mem_edge_e,
  find_edge: G_find_edge,
  find_all_edges: G_find_all_edges,
  succ: G_succ,
  pred: G_pred,
  succ_e: G_succ_e,
  pred_e: G_pred_e,
  iter_vertex: G_iter_vertex,
  fold_vertex: G_fold_vertex,
  iter_edges: G_iter_edges,
  fold_edges: G_fold_edges,
  iter_edges_e: G_iter_edges_e,
  fold_edges_e: G_fold_edges_e,
  map_vertex: G_map_vertex,
  iter_succ: G_iter_succ,
  iter_pred: G_iter_pred,
  fold_succ: G_fold_succ,
  fold_pred: G_fold_pred,
  iter_succ_e: G_iter_succ_e,
  fold_succ_e: G_fold_succ_e,
  iter_pred_e: G_iter_pred_e,
  fold_pred_e: G_fold_pred_e,
  create: G_create,
  clear: G_clear,
  copy: G_copy,
  add_vertex: G_add_vertex,
  remove_vertex: G_remove_vertex,
  add_edge: G_add_edge,
  add_edge_e: G_add_edge_e,
  remove_edge: G_remove_edge,
  remove_edge_e: G_remove_edge_e
};

var B = Builder$RescriptOcamlgraph.I(G);

function test(n) {
  var v = $$Array.init(n, B.G.V.create);
  var make = function (_g, _i) {
    while(true) {
      var i = _i;
      var g = _g;
      if (i === n) {
        return g;
      }
      _i = i + 1 | 0;
      _g = Curry._2(B.add_vertex, g, Caml_array.get(v, i));
      continue ;
    };
  };
  var g = make(Curry._1(B.empty, undefined), 0);
  for(var i = 0; i < n; ++i){
    for(var j = 0; j < n; ++j){
      if (Random.bool(undefined)) {
        g = Curry._3(B.add_edge, g, Caml_array.get(v, i), Caml_array.get(v, j));
      }
      
    }
  }
  var counter = {
    contents: 0
  };
  var f = function (x) {
    counter.contents = counter.contents + 1 | 0;
    return x;
  };
  var g$p = Curry._2(B.G.map_vertex, f, g);
  if (counter.contents !== n) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            30,
            4
          ],
          Error: new Error()
        };
  }
  if (Curry._1(B.G.nb_vertex, g$p) === n) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_map_vertex.res",
          31,
          4
        ],
        Error: new Error()
      };
}

for(var n = 0; n <= 10; ++n){
  test(n);
}

var G_V$1 = Pack$RescriptOcamlgraph.Graph.V;

var G_E$1 = Pack$RescriptOcamlgraph.Graph.E;

var G_is_directed$1 = Pack$RescriptOcamlgraph.Graph.is_directed;

var G_is_empty$1 = Pack$RescriptOcamlgraph.Graph.is_empty;

var G_nb_vertex$1 = Pack$RescriptOcamlgraph.Graph.nb_vertex;

var G_nb_edges$1 = Pack$RescriptOcamlgraph.Graph.nb_edges;

var G_out_degree$1 = Pack$RescriptOcamlgraph.Graph.out_degree;

var G_in_degree$1 = Pack$RescriptOcamlgraph.Graph.in_degree;

var G_mem_vertex$1 = Pack$RescriptOcamlgraph.Graph.mem_vertex;

var G_mem_edge$1 = Pack$RescriptOcamlgraph.Graph.mem_edge;

var G_mem_edge_e$1 = Pack$RescriptOcamlgraph.Graph.mem_edge_e;

var G_find_edge$1 = Pack$RescriptOcamlgraph.Graph.find_edge;

var G_find_all_edges$1 = Pack$RescriptOcamlgraph.Graph.find_all_edges;

var G_succ$1 = Pack$RescriptOcamlgraph.Graph.succ;

var G_pred$1 = Pack$RescriptOcamlgraph.Graph.pred;

var G_succ_e$1 = Pack$RescriptOcamlgraph.Graph.succ_e;

var G_pred_e$1 = Pack$RescriptOcamlgraph.Graph.pred_e;

var G_iter_vertex$1 = Pack$RescriptOcamlgraph.Graph.iter_vertex;

var G_fold_vertex$1 = Pack$RescriptOcamlgraph.Graph.fold_vertex;

var G_iter_edges$1 = Pack$RescriptOcamlgraph.Graph.iter_edges;

var G_fold_edges$1 = Pack$RescriptOcamlgraph.Graph.fold_edges;

var G_iter_edges_e$1 = Pack$RescriptOcamlgraph.Graph.iter_edges_e;

var G_fold_edges_e$1 = Pack$RescriptOcamlgraph.Graph.fold_edges_e;

var G_map_vertex$1 = Pack$RescriptOcamlgraph.Graph.map_vertex;

var G_iter_succ$1 = Pack$RescriptOcamlgraph.Graph.iter_succ;

var G_iter_pred$1 = Pack$RescriptOcamlgraph.Graph.iter_pred;

var G_fold_succ$1 = Pack$RescriptOcamlgraph.Graph.fold_succ;

var G_fold_pred$1 = Pack$RescriptOcamlgraph.Graph.fold_pred;

var G_iter_succ_e$1 = Pack$RescriptOcamlgraph.Graph.iter_succ_e;

var G_fold_succ_e$1 = Pack$RescriptOcamlgraph.Graph.fold_succ_e;

var G_iter_pred_e$1 = Pack$RescriptOcamlgraph.Graph.iter_pred_e;

var G_fold_pred_e$1 = Pack$RescriptOcamlgraph.Graph.fold_pred_e;

var G_create$1 = Pack$RescriptOcamlgraph.Graph.create;

var G_clear$1 = Pack$RescriptOcamlgraph.Graph.clear;

var G_copy$1 = Pack$RescriptOcamlgraph.Graph.copy;

var G_add_vertex$1 = Pack$RescriptOcamlgraph.Graph.add_vertex;

var G_remove_vertex$1 = Pack$RescriptOcamlgraph.Graph.remove_vertex;

var G_add_edge$1 = Pack$RescriptOcamlgraph.Graph.add_edge;

var G_add_edge_e$1 = Pack$RescriptOcamlgraph.Graph.add_edge_e;

var G_remove_edge$1 = Pack$RescriptOcamlgraph.Graph.remove_edge;

var G_remove_edge_e$1 = Pack$RescriptOcamlgraph.Graph.remove_edge_e;

var G$1 = {
  V: G_V$1,
  E: G_E$1,
  is_directed: G_is_directed$1,
  is_empty: G_is_empty$1,
  nb_vertex: G_nb_vertex$1,
  nb_edges: G_nb_edges$1,
  out_degree: G_out_degree$1,
  in_degree: G_in_degree$1,
  mem_vertex: G_mem_vertex$1,
  mem_edge: G_mem_edge$1,
  mem_edge_e: G_mem_edge_e$1,
  find_edge: G_find_edge$1,
  find_all_edges: G_find_all_edges$1,
  succ: G_succ$1,
  pred: G_pred$1,
  succ_e: G_succ_e$1,
  pred_e: G_pred_e$1,
  iter_vertex: G_iter_vertex$1,
  fold_vertex: G_fold_vertex$1,
  iter_edges: G_iter_edges$1,
  fold_edges: G_fold_edges$1,
  iter_edges_e: G_iter_edges_e$1,
  fold_edges_e: G_fold_edges_e$1,
  map_vertex: G_map_vertex$1,
  iter_succ: G_iter_succ$1,
  iter_pred: G_iter_pred$1,
  fold_succ: G_fold_succ$1,
  fold_pred: G_fold_pred$1,
  iter_succ_e: G_iter_succ_e$1,
  fold_succ_e: G_fold_succ_e$1,
  iter_pred_e: G_iter_pred_e$1,
  fold_pred_e: G_fold_pred_e$1,
  create: G_create$1,
  clear: G_clear$1,
  copy: G_copy$1,
  add_vertex: G_add_vertex$1,
  remove_vertex: G_remove_vertex$1,
  add_edge: G_add_edge$1,
  add_edge_e: G_add_edge_e$1,
  remove_edge: G_remove_edge$1,
  remove_edge_e: G_remove_edge_e$1
};

var B$1 = Builder$RescriptOcamlgraph.I(G$1);

function test$1(n) {
  var v = $$Array.init(n, B$1.G.V.create);
  var make = function (_g, _i) {
    while(true) {
      var i = _i;
      var g = _g;
      if (i === n) {
        return g;
      }
      _i = i + 1 | 0;
      _g = Curry._2(B$1.add_vertex, g, Caml_array.get(v, i));
      continue ;
    };
  };
  var g = make(Curry._1(B$1.empty, undefined), 0);
  for(var i = 0; i < n; ++i){
    for(var j = 0; j < n; ++j){
      if (Random.bool(undefined)) {
        g = Curry._3(B$1.add_edge, g, Caml_array.get(v, i), Caml_array.get(v, j));
      }
      
    }
  }
  var counter = {
    contents: 0
  };
  var f = function (x) {
    counter.contents = counter.contents + 1 | 0;
    return x;
  };
  var g$p = Curry._2(B$1.G.map_vertex, f, g);
  if (counter.contents !== n) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            30,
            4
          ],
          Error: new Error()
        };
  }
  if (Curry._1(B$1.G.nb_vertex, g$p) === n) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_map_vertex.res",
          31,
          4
        ],
        Error: new Error()
      };
}

for(var n$1 = 0; n$1 <= 10; ++n$1){
  test$1(n$1);
}

var G$2 = Imperative$RescriptOcamlgraph.Digraph.Concrete({
      compare: compare,
      hash: hash,
      equal: equal
    });

var B$2 = Builder$RescriptOcamlgraph.I(G$2);

function test$2(n) {
  var v = $$Array.init(n, B$2.G.V.create);
  var make = function (_g, _i) {
    while(true) {
      var i = _i;
      var g = _g;
      if (i === n) {
        return g;
      }
      _i = i + 1 | 0;
      _g = Curry._2(B$2.add_vertex, g, Caml_array.get(v, i));
      continue ;
    };
  };
  var g = make(Curry._1(B$2.empty, undefined), 0);
  for(var i = 0; i < n; ++i){
    for(var j = 0; j < n; ++j){
      if (Random.bool(undefined)) {
        g = Curry._3(B$2.add_edge, g, Caml_array.get(v, i), Caml_array.get(v, j));
      }
      
    }
  }
  var counter = {
    contents: 0
  };
  var f = function (x) {
    counter.contents = counter.contents + 1 | 0;
    return x;
  };
  var g$p = Curry._2(B$2.G.map_vertex, f, g);
  if (counter.contents !== n) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            30,
            4
          ],
          Error: new Error()
        };
  }
  if (Curry._1(B$2.G.nb_vertex, g$p) === n) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_map_vertex.res",
          31,
          4
        ],
        Error: new Error()
      };
}

for(var n$2 = 0; n$2 <= 10; ++n$2){
  test$2(n$2);
}

var G$3 = Imperative$RescriptOcamlgraph.Digraph.Abstract({});

var B$3 = Builder$RescriptOcamlgraph.I(G$3);

function test$3(n) {
  var v = $$Array.init(n, B$3.G.V.create);
  var make = function (_g, _i) {
    while(true) {
      var i = _i;
      var g = _g;
      if (i === n) {
        return g;
      }
      _i = i + 1 | 0;
      _g = Curry._2(B$3.add_vertex, g, Caml_array.get(v, i));
      continue ;
    };
  };
  var g = make(Curry._1(B$3.empty, undefined), 0);
  for(var i = 0; i < n; ++i){
    for(var j = 0; j < n; ++j){
      if (Random.bool(undefined)) {
        g = Curry._3(B$3.add_edge, g, Caml_array.get(v, i), Caml_array.get(v, j));
      }
      
    }
  }
  var counter = {
    contents: 0
  };
  var f = function (x) {
    counter.contents = counter.contents + 1 | 0;
    return x;
  };
  var g$p = Curry._2(B$3.G.map_vertex, f, g);
  if (counter.contents !== n) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            30,
            4
          ],
          Error: new Error()
        };
  }
  if (Curry._1(B$3.G.nb_vertex, g$p) === n) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_map_vertex.res",
          31,
          4
        ],
        Error: new Error()
      };
}

for(var n$3 = 0; n$3 <= 10; ++n$3){
  test$3(n$3);
}

var G$4 = Imperative$RescriptOcamlgraph.Digraph.ConcreteBidirectional({
      compare: compare,
      hash: hash,
      equal: equal
    });

var B$4 = Builder$RescriptOcamlgraph.I(G$4);

function test$4(n) {
  var v = $$Array.init(n, B$4.G.V.create);
  var make = function (_g, _i) {
    while(true) {
      var i = _i;
      var g = _g;
      if (i === n) {
        return g;
      }
      _i = i + 1 | 0;
      _g = Curry._2(B$4.add_vertex, g, Caml_array.get(v, i));
      continue ;
    };
  };
  var g = make(Curry._1(B$4.empty, undefined), 0);
  for(var i = 0; i < n; ++i){
    for(var j = 0; j < n; ++j){
      if (Random.bool(undefined)) {
        g = Curry._3(B$4.add_edge, g, Caml_array.get(v, i), Caml_array.get(v, j));
      }
      
    }
  }
  var counter = {
    contents: 0
  };
  var f = function (x) {
    counter.contents = counter.contents + 1 | 0;
    return x;
  };
  var g$p = Curry._2(B$4.G.map_vertex, f, g);
  if (counter.contents !== n) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            30,
            4
          ],
          Error: new Error()
        };
  }
  if (Curry._1(B$4.G.nb_vertex, g$p) === n) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_map_vertex.res",
          31,
          4
        ],
        Error: new Error()
      };
}

for(var n$4 = 0; n$4 <= 10; ++n$4){
  test$4(n$4);
}

var partial_arg = {
  compare: compare,
  hash: hash,
  equal: equal
};

var partial_arg$1 = Imperative$RescriptOcamlgraph.Digraph.ConcreteLabeled;

var G$5 = (function (param) {
      return partial_arg$1(partial_arg, param);
    })({
      compare: compare,
      $$default: 42
    });

var B$5 = Builder$RescriptOcamlgraph.I(G$5);

function test$5(n) {
  var v = $$Array.init(n, B$5.G.V.create);
  var make = function (_g, _i) {
    while(true) {
      var i = _i;
      var g = _g;
      if (i === n) {
        return g;
      }
      _i = i + 1 | 0;
      _g = Curry._2(B$5.add_vertex, g, Caml_array.get(v, i));
      continue ;
    };
  };
  var g = make(Curry._1(B$5.empty, undefined), 0);
  for(var i = 0; i < n; ++i){
    for(var j = 0; j < n; ++j){
      if (Random.bool(undefined)) {
        g = Curry._3(B$5.add_edge, g, Caml_array.get(v, i), Caml_array.get(v, j));
      }
      
    }
  }
  var counter = {
    contents: 0
  };
  var f = function (x) {
    counter.contents = counter.contents + 1 | 0;
    return x;
  };
  var g$p = Curry._2(B$5.G.map_vertex, f, g);
  if (counter.contents !== n) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            30,
            4
          ],
          Error: new Error()
        };
  }
  if (Curry._1(B$5.G.nb_vertex, g$p) === n) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_map_vertex.res",
          31,
          4
        ],
        Error: new Error()
      };
}

for(var n$5 = 0; n$5 <= 10; ++n$5){
  test$5(n$5);
}

var partial_arg$2 = {};

var partial_arg$3 = Imperative$RescriptOcamlgraph.Digraph.AbstractLabeled;

var G$6 = (function (param) {
      return partial_arg$3(partial_arg$2, param);
    })({
      compare: compare,
      $$default: 42
    });

var B$6 = Builder$RescriptOcamlgraph.I(G$6);

function test$6(n) {
  var v = $$Array.init(n, B$6.G.V.create);
  var make = function (_g, _i) {
    while(true) {
      var i = _i;
      var g = _g;
      if (i === n) {
        return g;
      }
      _i = i + 1 | 0;
      _g = Curry._2(B$6.add_vertex, g, Caml_array.get(v, i));
      continue ;
    };
  };
  var g = make(Curry._1(B$6.empty, undefined), 0);
  for(var i = 0; i < n; ++i){
    for(var j = 0; j < n; ++j){
      if (Random.bool(undefined)) {
        g = Curry._3(B$6.add_edge, g, Caml_array.get(v, i), Caml_array.get(v, j));
      }
      
    }
  }
  var counter = {
    contents: 0
  };
  var f = function (x) {
    counter.contents = counter.contents + 1 | 0;
    return x;
  };
  var g$p = Curry._2(B$6.G.map_vertex, f, g);
  if (counter.contents !== n) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            30,
            4
          ],
          Error: new Error()
        };
  }
  if (Curry._1(B$6.G.nb_vertex, g$p) === n) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_map_vertex.res",
          31,
          4
        ],
        Error: new Error()
      };
}

for(var n$6 = 0; n$6 <= 10; ++n$6){
  test$6(n$6);
}

var partial_arg$4 = {
  compare: compare,
  hash: hash,
  equal: equal
};

var partial_arg$5 = Imperative$RescriptOcamlgraph.Digraph.ConcreteBidirectionalLabeled;

var G$7 = (function (param) {
      return partial_arg$5(partial_arg$4, param);
    })({
      compare: compare,
      $$default: 42
    });

var B$7 = Builder$RescriptOcamlgraph.I(G$7);

function test$7(n) {
  var v = $$Array.init(n, B$7.G.V.create);
  var make = function (_g, _i) {
    while(true) {
      var i = _i;
      var g = _g;
      if (i === n) {
        return g;
      }
      _i = i + 1 | 0;
      _g = Curry._2(B$7.add_vertex, g, Caml_array.get(v, i));
      continue ;
    };
  };
  var g = make(Curry._1(B$7.empty, undefined), 0);
  for(var i = 0; i < n; ++i){
    for(var j = 0; j < n; ++j){
      if (Random.bool(undefined)) {
        g = Curry._3(B$7.add_edge, g, Caml_array.get(v, i), Caml_array.get(v, j));
      }
      
    }
  }
  var counter = {
    contents: 0
  };
  var f = function (x) {
    counter.contents = counter.contents + 1 | 0;
    return x;
  };
  var g$p = Curry._2(B$7.G.map_vertex, f, g);
  if (counter.contents !== n) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            30,
            4
          ],
          Error: new Error()
        };
  }
  if (Curry._1(B$7.G.nb_vertex, g$p) === n) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_map_vertex.res",
          31,
          4
        ],
        Error: new Error()
      };
}

for(var n$7 = 0; n$7 <= 10; ++n$7){
  test$7(n$7);
}

var G$8 = Imperative$RescriptOcamlgraph.Graph.Concrete({
      compare: compare,
      hash: hash,
      equal: equal
    });

var B$8 = Builder$RescriptOcamlgraph.I(G$8);

function test$8(n) {
  var v = $$Array.init(n, B$8.G.V.create);
  var make = function (_g, _i) {
    while(true) {
      var i = _i;
      var g = _g;
      if (i === n) {
        return g;
      }
      _i = i + 1 | 0;
      _g = Curry._2(B$8.add_vertex, g, Caml_array.get(v, i));
      continue ;
    };
  };
  var g = make(Curry._1(B$8.empty, undefined), 0);
  for(var i = 0; i < n; ++i){
    for(var j = 0; j < n; ++j){
      if (Random.bool(undefined)) {
        g = Curry._3(B$8.add_edge, g, Caml_array.get(v, i), Caml_array.get(v, j));
      }
      
    }
  }
  var counter = {
    contents: 0
  };
  var f = function (x) {
    counter.contents = counter.contents + 1 | 0;
    return x;
  };
  var g$p = Curry._2(B$8.G.map_vertex, f, g);
  if (counter.contents !== n) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            30,
            4
          ],
          Error: new Error()
        };
  }
  if (Curry._1(B$8.G.nb_vertex, g$p) === n) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_map_vertex.res",
          31,
          4
        ],
        Error: new Error()
      };
}

for(var n$8 = 0; n$8 <= 10; ++n$8){
  test$8(n$8);
}

var G$9 = Imperative$RescriptOcamlgraph.Graph.Abstract({});

var B$9 = Builder$RescriptOcamlgraph.I(G$9);

function test$9(n) {
  var v = $$Array.init(n, B$9.G.V.create);
  var make = function (_g, _i) {
    while(true) {
      var i = _i;
      var g = _g;
      if (i === n) {
        return g;
      }
      _i = i + 1 | 0;
      _g = Curry._2(B$9.add_vertex, g, Caml_array.get(v, i));
      continue ;
    };
  };
  var g = make(Curry._1(B$9.empty, undefined), 0);
  for(var i = 0; i < n; ++i){
    for(var j = 0; j < n; ++j){
      if (Random.bool(undefined)) {
        g = Curry._3(B$9.add_edge, g, Caml_array.get(v, i), Caml_array.get(v, j));
      }
      
    }
  }
  var counter = {
    contents: 0
  };
  var f = function (x) {
    counter.contents = counter.contents + 1 | 0;
    return x;
  };
  var g$p = Curry._2(B$9.G.map_vertex, f, g);
  if (counter.contents !== n) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            30,
            4
          ],
          Error: new Error()
        };
  }
  if (Curry._1(B$9.G.nb_vertex, g$p) === n) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_map_vertex.res",
          31,
          4
        ],
        Error: new Error()
      };
}

for(var n$9 = 0; n$9 <= 10; ++n$9){
  test$9(n$9);
}

var partial_arg$6 = {
  compare: compare,
  hash: hash,
  equal: equal
};

var partial_arg$7 = Imperative$RescriptOcamlgraph.Graph.ConcreteLabeled;

var G$10 = (function (param) {
      return partial_arg$7(partial_arg$6, param);
    })({
      compare: compare,
      $$default: 42
    });

var B$10 = Builder$RescriptOcamlgraph.I(G$10);

function test$10(n) {
  var v = $$Array.init(n, B$10.G.V.create);
  var make = function (_g, _i) {
    while(true) {
      var i = _i;
      var g = _g;
      if (i === n) {
        return g;
      }
      _i = i + 1 | 0;
      _g = Curry._2(B$10.add_vertex, g, Caml_array.get(v, i));
      continue ;
    };
  };
  var g = make(Curry._1(B$10.empty, undefined), 0);
  for(var i = 0; i < n; ++i){
    for(var j = 0; j < n; ++j){
      if (Random.bool(undefined)) {
        g = Curry._3(B$10.add_edge, g, Caml_array.get(v, i), Caml_array.get(v, j));
      }
      
    }
  }
  var counter = {
    contents: 0
  };
  var f = function (x) {
    counter.contents = counter.contents + 1 | 0;
    return x;
  };
  var g$p = Curry._2(B$10.G.map_vertex, f, g);
  if (counter.contents !== n) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            30,
            4
          ],
          Error: new Error()
        };
  }
  if (Curry._1(B$10.G.nb_vertex, g$p) === n) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_map_vertex.res",
          31,
          4
        ],
        Error: new Error()
      };
}

for(var n$10 = 0; n$10 <= 10; ++n$10){
  test$10(n$10);
}

var partial_arg$8 = {};

var partial_arg$9 = Imperative$RescriptOcamlgraph.Graph.AbstractLabeled;

var G$11 = (function (param) {
      return partial_arg$9(partial_arg$8, param);
    })({
      compare: compare,
      $$default: 42
    });

var B$11 = Builder$RescriptOcamlgraph.I(G$11);

function test$11(n) {
  var v = $$Array.init(n, B$11.G.V.create);
  var make = function (_g, _i) {
    while(true) {
      var i = _i;
      var g = _g;
      if (i === n) {
        return g;
      }
      _i = i + 1 | 0;
      _g = Curry._2(B$11.add_vertex, g, Caml_array.get(v, i));
      continue ;
    };
  };
  var g = make(Curry._1(B$11.empty, undefined), 0);
  for(var i = 0; i < n; ++i){
    for(var j = 0; j < n; ++j){
      if (Random.bool(undefined)) {
        g = Curry._3(B$11.add_edge, g, Caml_array.get(v, i), Caml_array.get(v, j));
      }
      
    }
  }
  var counter = {
    contents: 0
  };
  var f = function (x) {
    counter.contents = counter.contents + 1 | 0;
    return x;
  };
  var g$p = Curry._2(B$11.G.map_vertex, f, g);
  if (counter.contents !== n) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            30,
            4
          ],
          Error: new Error()
        };
  }
  if (Curry._1(B$11.G.nb_vertex, g$p) === n) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_map_vertex.res",
          31,
          4
        ],
        Error: new Error()
      };
}

for(var n$11 = 0; n$11 <= 10; ++n$11){
  test$11(n$11);
}

function TestM(G) {
  var test = function (n) {
    var g = Curry._1(G.make, n);
    for(var i = 0; i < n; ++i){
      for(var j = 0; j < n; ++j){
        if (Random.bool(undefined)) {
          Curry._3(G.add_edge, g, i, j);
        }
        
      }
    }
    var counter = {
      contents: 0
    };
    var f = function (x) {
      counter.contents = counter.contents + 1 | 0;
      return x;
    };
    var g$p = Curry._2(G.map_vertex, f, g);
    if (counter.contents !== n) {
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "test_map_vertex.res",
              82,
              4
            ],
            Error: new Error()
          };
    }
    if (Curry._1(G.nb_vertex, g$p) === n) {
      return ;
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            83,
            4
          ],
          Error: new Error()
        };
  };
  for(var n = 0; n <= 10; ++n){
    test(n);
  }
  return {
          test: test
        };
}

var G$12 = Imperative$RescriptOcamlgraph.Matrix.Digraph;

function test$12(n) {
  var g = Curry._1(G$12.make, n);
  for(var i = 0; i < n; ++i){
    for(var j = 0; j < n; ++j){
      if (Random.bool(undefined)) {
        Curry._3(G$12.add_edge, g, i, j);
      }
      
    }
  }
  var counter = {
    contents: 0
  };
  var f = function (x) {
    counter.contents = counter.contents + 1 | 0;
    return x;
  };
  var g$p = Curry._2(G$12.map_vertex, f, g);
  if (counter.contents !== n) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            82,
            4
          ],
          Error: new Error()
        };
  }
  if (Curry._1(G$12.nb_vertex, g$p) === n) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_map_vertex.res",
          83,
          4
        ],
        Error: new Error()
      };
}

for(var n$12 = 0; n$12 <= 10; ++n$12){
  test$12(n$12);
}

var G$13 = Imperative$RescriptOcamlgraph.Matrix.Graph;

function test$13(n) {
  var g = Curry._1(G$13.make, n);
  for(var i = 0; i < n; ++i){
    for(var j = 0; j < n; ++j){
      if (Random.bool(undefined)) {
        Curry._3(G$13.add_edge, g, i, j);
      }
      
    }
  }
  var counter = {
    contents: 0
  };
  var f = function (x) {
    counter.contents = counter.contents + 1 | 0;
    return x;
  };
  var g$p = Curry._2(G$13.map_vertex, f, g);
  if (counter.contents !== n) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            82,
            4
          ],
          Error: new Error()
        };
  }
  if (Curry._1(G$13.nb_vertex, g$p) === n) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_map_vertex.res",
          83,
          4
        ],
        Error: new Error()
      };
}

for(var n$13 = 0; n$13 <= 10; ++n$13){
  test$13(n$13);
}

var G$14 = Persistent$RescriptOcamlgraph.Digraph.Concrete({
      compare: compare,
      hash: hash,
      equal: equal
    });

var B$12 = Builder$RescriptOcamlgraph.P(G$14);

function test$14(n) {
  var v = $$Array.init(n, B$12.G.V.create);
  var make = function (_g, _i) {
    while(true) {
      var i = _i;
      var g = _g;
      if (i === n) {
        return g;
      }
      _i = i + 1 | 0;
      _g = Curry._2(B$12.add_vertex, g, Caml_array.get(v, i));
      continue ;
    };
  };
  var g = make(Curry._1(B$12.empty, undefined), 0);
  for(var i = 0; i < n; ++i){
    for(var j = 0; j < n; ++j){
      if (Random.bool(undefined)) {
        g = Curry._3(B$12.add_edge, g, Caml_array.get(v, i), Caml_array.get(v, j));
      }
      
    }
  }
  var counter = {
    contents: 0
  };
  var f = function (x) {
    counter.contents = counter.contents + 1 | 0;
    return x;
  };
  var g$p = Curry._2(B$12.G.map_vertex, f, g);
  if (counter.contents !== n) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            30,
            4
          ],
          Error: new Error()
        };
  }
  if (Curry._1(B$12.G.nb_vertex, g$p) === n) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_map_vertex.res",
          31,
          4
        ],
        Error: new Error()
      };
}

for(var n$14 = 0; n$14 <= 10; ++n$14){
  test$14(n$14);
}

var G$15 = Persistent$RescriptOcamlgraph.Digraph.Abstract({});

var B$13 = Builder$RescriptOcamlgraph.P(G$15);

function test$15(n) {
  var v = $$Array.init(n, B$13.G.V.create);
  var make = function (_g, _i) {
    while(true) {
      var i = _i;
      var g = _g;
      if (i === n) {
        return g;
      }
      _i = i + 1 | 0;
      _g = Curry._2(B$13.add_vertex, g, Caml_array.get(v, i));
      continue ;
    };
  };
  var g = make(Curry._1(B$13.empty, undefined), 0);
  for(var i = 0; i < n; ++i){
    for(var j = 0; j < n; ++j){
      if (Random.bool(undefined)) {
        g = Curry._3(B$13.add_edge, g, Caml_array.get(v, i), Caml_array.get(v, j));
      }
      
    }
  }
  var counter = {
    contents: 0
  };
  var f = function (x) {
    counter.contents = counter.contents + 1 | 0;
    return x;
  };
  var g$p = Curry._2(B$13.G.map_vertex, f, g);
  if (counter.contents !== n) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            30,
            4
          ],
          Error: new Error()
        };
  }
  if (Curry._1(B$13.G.nb_vertex, g$p) === n) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_map_vertex.res",
          31,
          4
        ],
        Error: new Error()
      };
}

for(var n$15 = 0; n$15 <= 10; ++n$15){
  test$15(n$15);
}

var G$16 = Persistent$RescriptOcamlgraph.Digraph.ConcreteBidirectional({
      compare: compare,
      hash: hash,
      equal: equal
    });

var B$14 = Builder$RescriptOcamlgraph.P(G$16);

function test$16(n) {
  var v = $$Array.init(n, B$14.G.V.create);
  var make = function (_g, _i) {
    while(true) {
      var i = _i;
      var g = _g;
      if (i === n) {
        return g;
      }
      _i = i + 1 | 0;
      _g = Curry._2(B$14.add_vertex, g, Caml_array.get(v, i));
      continue ;
    };
  };
  var g = make(Curry._1(B$14.empty, undefined), 0);
  for(var i = 0; i < n; ++i){
    for(var j = 0; j < n; ++j){
      if (Random.bool(undefined)) {
        g = Curry._3(B$14.add_edge, g, Caml_array.get(v, i), Caml_array.get(v, j));
      }
      
    }
  }
  var counter = {
    contents: 0
  };
  var f = function (x) {
    counter.contents = counter.contents + 1 | 0;
    return x;
  };
  var g$p = Curry._2(B$14.G.map_vertex, f, g);
  if (counter.contents !== n) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            30,
            4
          ],
          Error: new Error()
        };
  }
  if (Curry._1(B$14.G.nb_vertex, g$p) === n) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_map_vertex.res",
          31,
          4
        ],
        Error: new Error()
      };
}

for(var n$16 = 0; n$16 <= 10; ++n$16){
  test$16(n$16);
}

var partial_arg$10 = {
  compare: compare,
  hash: hash,
  equal: equal
};

var partial_arg$11 = Persistent$RescriptOcamlgraph.Digraph.ConcreteLabeled;

var G$17 = (function (param) {
      return partial_arg$11(partial_arg$10, param);
    })({
      compare: compare,
      $$default: 42
    });

var B$15 = Builder$RescriptOcamlgraph.P(G$17);

function test$17(n) {
  var v = $$Array.init(n, B$15.G.V.create);
  var make = function (_g, _i) {
    while(true) {
      var i = _i;
      var g = _g;
      if (i === n) {
        return g;
      }
      _i = i + 1 | 0;
      _g = Curry._2(B$15.add_vertex, g, Caml_array.get(v, i));
      continue ;
    };
  };
  var g = make(Curry._1(B$15.empty, undefined), 0);
  for(var i = 0; i < n; ++i){
    for(var j = 0; j < n; ++j){
      if (Random.bool(undefined)) {
        g = Curry._3(B$15.add_edge, g, Caml_array.get(v, i), Caml_array.get(v, j));
      }
      
    }
  }
  var counter = {
    contents: 0
  };
  var f = function (x) {
    counter.contents = counter.contents + 1 | 0;
    return x;
  };
  var g$p = Curry._2(B$15.G.map_vertex, f, g);
  if (counter.contents !== n) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            30,
            4
          ],
          Error: new Error()
        };
  }
  if (Curry._1(B$15.G.nb_vertex, g$p) === n) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_map_vertex.res",
          31,
          4
        ],
        Error: new Error()
      };
}

for(var n$17 = 0; n$17 <= 10; ++n$17){
  test$17(n$17);
}

var partial_arg$12 = {};

var partial_arg$13 = Persistent$RescriptOcamlgraph.Digraph.AbstractLabeled;

var G$18 = (function (param) {
      return partial_arg$13(partial_arg$12, param);
    })({
      compare: compare,
      $$default: 42
    });

var B$16 = Builder$RescriptOcamlgraph.P(G$18);

function test$18(n) {
  var v = $$Array.init(n, B$16.G.V.create);
  var make = function (_g, _i) {
    while(true) {
      var i = _i;
      var g = _g;
      if (i === n) {
        return g;
      }
      _i = i + 1 | 0;
      _g = Curry._2(B$16.add_vertex, g, Caml_array.get(v, i));
      continue ;
    };
  };
  var g = make(Curry._1(B$16.empty, undefined), 0);
  for(var i = 0; i < n; ++i){
    for(var j = 0; j < n; ++j){
      if (Random.bool(undefined)) {
        g = Curry._3(B$16.add_edge, g, Caml_array.get(v, i), Caml_array.get(v, j));
      }
      
    }
  }
  var counter = {
    contents: 0
  };
  var f = function (x) {
    counter.contents = counter.contents + 1 | 0;
    return x;
  };
  var g$p = Curry._2(B$16.G.map_vertex, f, g);
  if (counter.contents !== n) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            30,
            4
          ],
          Error: new Error()
        };
  }
  if (Curry._1(B$16.G.nb_vertex, g$p) === n) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_map_vertex.res",
          31,
          4
        ],
        Error: new Error()
      };
}

for(var n$18 = 0; n$18 <= 10; ++n$18){
  test$18(n$18);
}

var partial_arg$14 = {
  compare: compare,
  hash: hash,
  equal: equal
};

var partial_arg$15 = Persistent$RescriptOcamlgraph.Digraph.ConcreteBidirectionalLabeled;

var G$19 = (function (param) {
      return partial_arg$15(partial_arg$14, param);
    })({
      compare: compare,
      $$default: 42
    });

var B$17 = Builder$RescriptOcamlgraph.P(G$19);

function test$19(n) {
  var v = $$Array.init(n, B$17.G.V.create);
  var make = function (_g, _i) {
    while(true) {
      var i = _i;
      var g = _g;
      if (i === n) {
        return g;
      }
      _i = i + 1 | 0;
      _g = Curry._2(B$17.add_vertex, g, Caml_array.get(v, i));
      continue ;
    };
  };
  var g = make(Curry._1(B$17.empty, undefined), 0);
  for(var i = 0; i < n; ++i){
    for(var j = 0; j < n; ++j){
      if (Random.bool(undefined)) {
        g = Curry._3(B$17.add_edge, g, Caml_array.get(v, i), Caml_array.get(v, j));
      }
      
    }
  }
  var counter = {
    contents: 0
  };
  var f = function (x) {
    counter.contents = counter.contents + 1 | 0;
    return x;
  };
  var g$p = Curry._2(B$17.G.map_vertex, f, g);
  if (counter.contents !== n) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            30,
            4
          ],
          Error: new Error()
        };
  }
  if (Curry._1(B$17.G.nb_vertex, g$p) === n) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_map_vertex.res",
          31,
          4
        ],
        Error: new Error()
      };
}

for(var n$19 = 0; n$19 <= 10; ++n$19){
  test$19(n$19);
}

var G$20 = Persistent$RescriptOcamlgraph.Graph.Concrete({
      compare: compare,
      hash: hash,
      equal: equal
    });

var B$18 = Builder$RescriptOcamlgraph.P(G$20);

function test$20(n) {
  var v = $$Array.init(n, B$18.G.V.create);
  var make = function (_g, _i) {
    while(true) {
      var i = _i;
      var g = _g;
      if (i === n) {
        return g;
      }
      _i = i + 1 | 0;
      _g = Curry._2(B$18.add_vertex, g, Caml_array.get(v, i));
      continue ;
    };
  };
  var g = make(Curry._1(B$18.empty, undefined), 0);
  for(var i = 0; i < n; ++i){
    for(var j = 0; j < n; ++j){
      if (Random.bool(undefined)) {
        g = Curry._3(B$18.add_edge, g, Caml_array.get(v, i), Caml_array.get(v, j));
      }
      
    }
  }
  var counter = {
    contents: 0
  };
  var f = function (x) {
    counter.contents = counter.contents + 1 | 0;
    return x;
  };
  var g$p = Curry._2(B$18.G.map_vertex, f, g);
  if (counter.contents !== n) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            30,
            4
          ],
          Error: new Error()
        };
  }
  if (Curry._1(B$18.G.nb_vertex, g$p) === n) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_map_vertex.res",
          31,
          4
        ],
        Error: new Error()
      };
}

for(var n$20 = 0; n$20 <= 10; ++n$20){
  test$20(n$20);
}

var G$21 = Persistent$RescriptOcamlgraph.Graph.Abstract({});

var B$19 = Builder$RescriptOcamlgraph.P(G$21);

function test$21(n) {
  var v = $$Array.init(n, B$19.G.V.create);
  var make = function (_g, _i) {
    while(true) {
      var i = _i;
      var g = _g;
      if (i === n) {
        return g;
      }
      _i = i + 1 | 0;
      _g = Curry._2(B$19.add_vertex, g, Caml_array.get(v, i));
      continue ;
    };
  };
  var g = make(Curry._1(B$19.empty, undefined), 0);
  for(var i = 0; i < n; ++i){
    for(var j = 0; j < n; ++j){
      if (Random.bool(undefined)) {
        g = Curry._3(B$19.add_edge, g, Caml_array.get(v, i), Caml_array.get(v, j));
      }
      
    }
  }
  var counter = {
    contents: 0
  };
  var f = function (x) {
    counter.contents = counter.contents + 1 | 0;
    return x;
  };
  var g$p = Curry._2(B$19.G.map_vertex, f, g);
  if (counter.contents !== n) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            30,
            4
          ],
          Error: new Error()
        };
  }
  if (Curry._1(B$19.G.nb_vertex, g$p) === n) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_map_vertex.res",
          31,
          4
        ],
        Error: new Error()
      };
}

for(var n$21 = 0; n$21 <= 10; ++n$21){
  test$21(n$21);
}

var partial_arg$16 = {
  compare: compare,
  hash: hash,
  equal: equal
};

var partial_arg$17 = Persistent$RescriptOcamlgraph.Graph.ConcreteLabeled;

var G$22 = (function (param) {
      return partial_arg$17(partial_arg$16, param);
    })({
      compare: compare,
      $$default: 42
    });

var B$20 = Builder$RescriptOcamlgraph.P(G$22);

function test$22(n) {
  var v = $$Array.init(n, B$20.G.V.create);
  var make = function (_g, _i) {
    while(true) {
      var i = _i;
      var g = _g;
      if (i === n) {
        return g;
      }
      _i = i + 1 | 0;
      _g = Curry._2(B$20.add_vertex, g, Caml_array.get(v, i));
      continue ;
    };
  };
  var g = make(Curry._1(B$20.empty, undefined), 0);
  for(var i = 0; i < n; ++i){
    for(var j = 0; j < n; ++j){
      if (Random.bool(undefined)) {
        g = Curry._3(B$20.add_edge, g, Caml_array.get(v, i), Caml_array.get(v, j));
      }
      
    }
  }
  var counter = {
    contents: 0
  };
  var f = function (x) {
    counter.contents = counter.contents + 1 | 0;
    return x;
  };
  var g$p = Curry._2(B$20.G.map_vertex, f, g);
  if (counter.contents !== n) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            30,
            4
          ],
          Error: new Error()
        };
  }
  if (Curry._1(B$20.G.nb_vertex, g$p) === n) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_map_vertex.res",
          31,
          4
        ],
        Error: new Error()
      };
}

for(var n$22 = 0; n$22 <= 10; ++n$22){
  test$22(n$22);
}

var partial_arg$18 = {};

var partial_arg$19 = Persistent$RescriptOcamlgraph.Graph.AbstractLabeled;

var G$23 = (function (param) {
      return partial_arg$19(partial_arg$18, param);
    })({
      compare: compare,
      $$default: 42
    });

var B$21 = Builder$RescriptOcamlgraph.P(G$23);

function test$23(n) {
  var v = $$Array.init(n, B$21.G.V.create);
  var make = function (_g, _i) {
    while(true) {
      var i = _i;
      var g = _g;
      if (i === n) {
        return g;
      }
      _i = i + 1 | 0;
      _g = Curry._2(B$21.add_vertex, g, Caml_array.get(v, i));
      continue ;
    };
  };
  var g = make(Curry._1(B$21.empty, undefined), 0);
  for(var i = 0; i < n; ++i){
    for(var j = 0; j < n; ++j){
      if (Random.bool(undefined)) {
        g = Curry._3(B$21.add_edge, g, Caml_array.get(v, i), Caml_array.get(v, j));
      }
      
    }
  }
  var counter = {
    contents: 0
  };
  var f = function (x) {
    counter.contents = counter.contents + 1 | 0;
    return x;
  };
  var g$p = Curry._2(B$21.G.map_vertex, f, g);
  if (counter.contents !== n) {
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_map_vertex.res",
            30,
            4
          ],
          Error: new Error()
        };
  }
  if (Curry._1(B$21.G.nb_vertex, g$p) === n) {
    return ;
  }
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "test_map_vertex.res",
          31,
          4
        ],
        Error: new Error()
      };
}

for(var n$23 = 0; n$23 <= 10; ++n$23){
  test$23(n$23);
}

export {
  TestB ,
  TestI ,
  TestP ,
  Int ,
  TestM ,
  test$23 as test,
  
}
/*  Not a pure module */
