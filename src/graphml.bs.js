// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "rescript/lib/es6/list.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Format from "rescript/lib/es6/format.js";

function Print(funarg, funarg$1) {
  var data_pp = function (fmt, param) {
    return Curry._2(Format.fprintf(fmt, /* Format */{
                    _0: {
                      TAG: /* String_literal */11,
                      _0: "<data key=\"",
                      _1: {
                        TAG: /* String */2,
                        _0: /* No_padding */0,
                        _1: {
                          TAG: /* String_literal */11,
                          _0: "\">",
                          _1: {
                            TAG: /* String */2,
                            _0: /* No_padding */0,
                            _1: {
                              TAG: /* String_literal */11,
                              _0: "</data>",
                              _1: /* End_of_format */0
                            }
                          }
                        }
                      }
                    },
                    _1: "<data key=\"%s\">%s</data>"
                  }), param[0], param[1]);
  };
  var pp_type = function (fmt, t, prop, typ, $$default) {
    Curry._4(Format.fprintf(fmt, /* Format */{
              _0: {
                TAG: /* String_literal */11,
                _0: "<key id=\"",
                _1: {
                  TAG: /* String */2,
                  _0: /* No_padding */0,
                  _1: {
                    TAG: /* String_literal */11,
                    _0: "\" for=\"",
                    _1: {
                      TAG: /* String */2,
                      _0: /* No_padding */0,
                      _1: {
                        TAG: /* String_literal */11,
                        _0: "\" attr.name=\"",
                        _1: {
                          TAG: /* String */2,
                          _0: /* No_padding */0,
                          _1: {
                            TAG: /* String_literal */11,
                            _0: "\" attr.type=\"",
                            _1: {
                              TAG: /* String */2,
                              _0: /* No_padding */0,
                              _1: {
                                TAG: /* String_literal */11,
                                _0: "\">",
                                _1: /* End_of_format */0
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              _1: "<key id=\"%s\" for=\"%s\" attr.name=\"%s\" attr.type=\"%s\">"
            }), prop, t, prop, typ);
    if ($$default !== undefined) {
      Curry._1(Format.fprintf(fmt, /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "\n <default>",
                  _1: {
                    TAG: /* String */2,
                    _0: /* No_padding */0,
                    _1: {
                      TAG: /* String_literal */11,
                      _0: "</default>\n",
                      _1: /* End_of_format */0
                    }
                  }
                },
                _1: "\n <default>%s</default>\n"
              }), $$default);
      return Format.fprintf(fmt, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "</key>\n",
                    _1: /* End_of_format */0
                  },
                  _1: "</key>\n"
                });
    } else {
      return Format.fprintf(fmt, /* Format */{
                  _0: {
                    TAG: /* String_literal */11,
                    _0: "</key>\n",
                    _1: /* End_of_format */0
                  },
                  _1: "</key>\n"
                });
    }
  };
  var print = function (fmt, graph) {
    Curry._1(Format.fprintf(fmt, /* Format */{
              _0: {
                TAG: /* String */2,
                _0: /* No_padding */0,
                _1: {
                  TAG: /* Char_literal */12,
                  _0: /* '\n' */10,
                  _1: /* End_of_format */0
                }
              },
              _1: "%s\n"
            }), "<?xml version=\"1.0\" encoding=\"UTF-8\"?> <graphml xmlns=\"http://graphml.graphdrawing.org/xmlns\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd\">");
    List.iter((function (param) {
            return pp_type(fmt, "node", param[0], param[1], param[2]);
          }), funarg$1.vertex_properties);
    List.iter((function (param) {
            return pp_type(fmt, "edge", param[0], param[1], param[2]);
          }), funarg$1.edge_properties);
    var directed = funarg.is_directed ? "edgedefault=\"directed\"" : "";
    Curry._1(Format.fprintf(fmt, /* Format */{
              _0: {
                TAG: /* String_literal */11,
                _0: "<graph id=\"G\" ",
                _1: {
                  TAG: /* String */2,
                  _0: /* No_padding */0,
                  _1: {
                    TAG: /* String_literal */11,
                    _0: ">\n",
                    _1: /* End_of_format */0
                  }
                }
              },
              _1: "<graph id=\"G\" %s>\n"
            }), directed);
    Curry._2(funarg.iter_vertex, (function (vertex) {
            var id = Curry._1(funarg$1.vertex_uid, vertex);
            var l = Curry._1(funarg$1.map_vertex, vertex);
            Curry._1(Format.fprintf(fmt, /* Format */{
                      _0: {
                        TAG: /* String_literal */11,
                        _0: " <node id=\"n",
                        _1: {
                          TAG: /* Int */4,
                          _0: /* Int_d */0,
                          _1: /* No_padding */0,
                          _2: /* No_precision */0,
                          _3: {
                            TAG: /* String_literal */11,
                            _0: "\">\n",
                            _1: /* End_of_format */0
                          }
                        }
                      },
                      _1: " <node id=\"n%d\">\n"
                    }), id);
            List.iter(Curry._1(Format.fprintf(fmt, /* Format */{
                          _0: {
                            TAG: /* String_literal */11,
                            _0: "  ",
                            _1: {
                              TAG: /* Alpha */15,
                              _0: {
                                TAG: /* Char_literal */12,
                                _0: /* '\n' */10,
                                _1: /* End_of_format */0
                              }
                            }
                          },
                          _1: "  %a\n"
                        }), data_pp), l);
            return Format.fprintf(fmt, /* Format */{
                        _0: {
                          TAG: /* String_literal */11,
                          _0: " </node>\n",
                          _1: /* End_of_format */0
                        },
                        _1: " </node>\n"
                      });
          }), graph);
    Curry._2(funarg.iter_edges_e, (function (edge) {
            var n1 = Curry._1(funarg$1.vertex_uid, Curry._1(funarg.E.src, edge));
            var n2 = Curry._1(funarg$1.vertex_uid, Curry._1(funarg.E.dst, edge));
            var eid = Curry._1(funarg$1.edge_uid, edge);
            var l = Curry._1(funarg$1.map_edge, edge);
            Curry._3(Format.fprintf(fmt, /* Format */{
                      _0: {
                        TAG: /* String_literal */11,
                        _0: " <edge id=\"e",
                        _1: {
                          TAG: /* Int */4,
                          _0: /* Int_d */0,
                          _1: /* No_padding */0,
                          _2: /* No_precision */0,
                          _3: {
                            TAG: /* String_literal */11,
                            _0: "\" source=\"n",
                            _1: {
                              TAG: /* Int */4,
                              _0: /* Int_d */0,
                              _1: /* No_padding */0,
                              _2: /* No_precision */0,
                              _3: {
                                TAG: /* String_literal */11,
                                _0: "\" target=\"n",
                                _1: {
                                  TAG: /* Int */4,
                                  _0: /* Int_d */0,
                                  _1: /* No_padding */0,
                                  _2: /* No_precision */0,
                                  _3: {
                                    TAG: /* String_literal */11,
                                    _0: "\">\n",
                                    _1: /* End_of_format */0
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      _1: " <edge id=\"e%d\" source=\"n%d\" target=\"n%d\">\n"
                    }), eid, n1, n2);
            List.iter(Curry._1(Format.fprintf(fmt, /* Format */{
                          _0: {
                            TAG: /* String_literal */11,
                            _0: "  ",
                            _1: {
                              TAG: /* Alpha */15,
                              _0: {
                                TAG: /* Char_literal */12,
                                _0: /* '\n' */10,
                                _1: /* End_of_format */0
                              }
                            }
                          },
                          _1: "  %a\n"
                        }), data_pp), l);
            return Format.fprintf(fmt, /* Format */{
                        _0: {
                          TAG: /* String_literal */11,
                          _0: " </edge>\n",
                          _1: /* End_of_format */0
                        },
                        _1: " </edge>\n"
                      });
          }), graph);
    Format.fprintf(fmt, /* Format */{
          _0: {
            TAG: /* String_literal */11,
            _0: "</graph>\n",
            _1: /* End_of_format */0
          },
          _1: "</graph>\n"
        });
    return Format.fprintf(fmt, /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "</graphml>\n",
                  _1: /* End_of_format */0
                },
                _1: "</graphml>\n"
              });
  };
  return {
          print: print
        };
}

export {
  Print ,
  
}
/* Format Not a pure module */
