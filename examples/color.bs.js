// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Arg from "rescript/lib/es6/arg.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Format from "rescript/lib/es6/format.js";
import * as Random from "rescript/lib/es6/random.js";
import * as Hashtbl from "rescript/lib/es6/hashtbl.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Pervasives from "rescript/lib/es6/pervasives.js";
import * as Rand$Graph from "../src/rand.bs.js";
import * as Traverse$Graph from "../src/traverse.bs.js";
import * as Imperative$Graph from "../src/imperative.bs.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

var n_ = {
  contents: 30
};

var prob_ = {
  contents: 0.5
};

var seed_ = {
  contents: undefined
};

var arg_spec_0 = [
  "-v",
  {
    TAG: /* Int */6,
    _0: (function (i) {
        n_.contents = i;
        
      })
  },
  " <int>  number of vertices"
];

var arg_spec_1 = {
  hd: [
    "-prob",
    {
      TAG: /* Float */8,
      _0: (function (f) {
          prob_.contents = f;
          
        })
    },
    " <float>  probability to discrad an edge"
  ],
  tl: {
    hd: [
      "-seed",
      {
        TAG: /* Int */6,
        _0: (function (n) {
            seed_.contents = n;
            
          })
      },
      " <int>  random seed"
    ],
    tl: /* [] */0
  }
};

var arg_spec = {
  hd: arg_spec_0,
  tl: arg_spec_1
};

Arg.parse(arg_spec, (function (param) {
        
      }), "usage: color <options>");

var n = n_.contents;

var prob = prob_.contents;

var s = seed_.contents;

var seed = s !== undefined ? s : (Random.self_init(undefined), Random.$$int(536870912));

Curry._1(Format.printf(/* Format */{
          _0: {
            TAG: /* String_literal */11,
            _0: "seed = ",
            _1: {
              TAG: /* Int */4,
              _0: /* Int_d */0,
              _1: /* No_padding */0,
              _2: /* No_precision */0,
              _3: {
                TAG: /* Formatting_lit */17,
                _0: /* Flush_newline */4,
                _1: /* End_of_format */0
              }
            }
          },
          _1: "seed = %d@."
        }), seed);

Random.init(seed);

var IntInt = {};

var compare = Caml_obj.caml_compare;

var equal = Caml_obj.caml_equal;

var Int = {
  compare: compare,
  hash: Hashtbl.hash,
  equal: equal,
  $$default: 0
};

var partial_arg = Imperative$Graph.Graph.AbstractLabeled;

var G = partial_arg(IntInt, {
      compare: compare,
      $$default: 0
    });

var R = Rand$Graph.Planar.I(G);

var g0 = Curry._5(R.graph, undefined, [
      20,
      780
    ], [
      20,
      580
    ], prob, n);

function round(f) {
  return f + 0.5 | 0;
}

var pi = 4.0 * Math.atan(1.0);

function color_vertex(v) {
  var match = Curry._1(G.V.label, v);
  console.log("color_vertex: " + String(match[0]) + ", " + String(match[1]));
  
}

var Dfs = Traverse$Graph.Dfs({
      is_directed: G.is_directed,
      V: G.V,
      iter_vertex: G.iter_vertex,
      fold_vertex: G.fold_vertex,
      iter_succ: G.iter_succ,
      fold_succ: G.fold_succ
    });

var Bfs = Traverse$Graph.Bfs({
      is_directed: G.is_directed,
      V: G.V,
      iter_vertex: G.iter_vertex,
      fold_vertex: G.fold_vertex,
      iter_succ: G.iter_succ,
      fold_succ: G.fold_succ
    });

function test_bfs(param) {
  try {
    var _i = Curry._1(Bfs.start, g0);
    while(true) {
      var i = _i;
      var v = Curry._1(Bfs.get, i);
      color_vertex(v);
      _i = Curry._1(Bfs.step, i);
      continue ;
    };
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Pervasives.Exit) {
      return ;
    }
    throw exn;
  }
}

function test_dfs(param) {
  try {
    var _i = Curry._1(Dfs.start, g0);
    while(true) {
      var i = _i;
      var v = Curry._1(Dfs.get, i);
      color_vertex(v);
      _i = Curry._1(Dfs.step, i);
      continue ;
    };
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Pervasives.Exit) {
      return ;
    }
    throw exn;
  }
}

test_bfs(undefined);

test_dfs(undefined);

var vertex_radius = 5;

export {
  n_ ,
  prob_ ,
  seed_ ,
  arg_spec ,
  n ,
  prob ,
  seed ,
  IntInt ,
  Int ,
  G ,
  R ,
  g0 ,
  round ,
  pi ,
  vertex_radius ,
  color_vertex ,
  Dfs ,
  Bfs ,
  test_bfs ,
  test_dfs ,
  
}
/*  Not a pure module */
