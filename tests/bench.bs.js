// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Format from "rescript/lib/es6/format.js";
import * as Printf from "rescript/lib/es6/printf.js";
import * as Random from "rescript/lib/es6/random.js";
import * as Pack$Graph from "../src/pack.bs.js";
import * as Rand$Graph from "../src/rand.bs.js";
import * as Builder$Graph from "../src/builder.bs.js";
import * as Traverse$Graph from "../src/traverse.bs.js";
import * as Components$Graph from "../src/components.bs.js";

function utime(f, x) {
  var u = Date.now();
  var y = Curry._1(f, x);
  var ut = Date.now() - u;
  return [
          y,
          ut
        ];
}

function print(f, x) {
  var match = utime(f, x);
  Curry._1(Format.printf(/* Format */{
            _0: {
              TAG: /* String_literal */11,
              _0: "user time: ",
              _1: {
                TAG: /* Float */8,
                _0: /* Float_f */0,
                _1: {
                  TAG: /* Lit_padding */0,
                  _0: /* Right */1,
                  _1: 2
                },
                _2: /* Lit_precision */{
                  _0: 2
                },
                _3: {
                  TAG: /* Formatting_lit */17,
                  _0: /* Flush_newline */4,
                  _1: /* End_of_format */0
                }
              }
            },
            _1: "user time: %2.2f@."
          }), match[1]);
  return match[0];
}

var Time = {
  utime: utime,
  print: print
};

function Bench(G, B) {
  var R = Rand$Graph.Make(B);
  var Dfs = Traverse$Graph.Dfs({
        is_directed: G.is_directed,
        V: G.V,
        iter_vertex: G.iter_vertex,
        fold_vertex: G.fold_vertex,
        iter_succ: G.iter_succ,
        fold_succ: G.fold_succ
      });
  var has_cycle = function (v, e) {
    var g = Curry._4(R.graph, undefined, v, e, undefined);
    var match = utime(Dfs.has_cycle, g);
    var b = match[0];
    Curry._4(Format.printf(/* Format */{
              _0: {
                TAG: /* String_literal */11,
                _0: "v = ",
                _1: {
                  TAG: /* Int */4,
                  _0: /* Int_d */0,
                  _1: /* No_padding */0,
                  _2: /* No_precision */0,
                  _3: {
                    TAG: /* String_literal */11,
                    _0: " e = ",
                    _1: {
                      TAG: /* Int */4,
                      _0: /* Int_d */0,
                      _1: /* No_padding */0,
                      _2: /* No_precision */0,
                      _3: {
                        TAG: /* String_literal */11,
                        _0: " cycle = ",
                        _1: {
                          TAG: /* Bool */9,
                          _0: /* No_padding */0,
                          _1: {
                            TAG: /* String_literal */11,
                            _0: " time = ",
                            _1: {
                              TAG: /* Float */8,
                              _0: /* Float_f */0,
                              _1: {
                                TAG: /* Lit_padding */0,
                                _0: /* Right */1,
                                _1: 2
                              },
                              _2: /* Lit_precision */{
                                _0: 2
                              },
                              _3: {
                                TAG: /* Formatting_lit */17,
                                _0: /* Flush_newline */4,
                                _1: /* End_of_format */0
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              _1: "v = %d e = %d cycle = %b time = %2.2f@."
            }), v, e, b, match[1]);
    return b;
  };
  var bench1 = function (param) {
    var e = 1;
    while(!has_cycle(20000, e)) {
      e = (e << 1);
    };
    
  };
  Printf.printf(/* Format */{
        _0: {
          TAG: /* String_literal */11,
          _0: "======== BEGIN bench1 =========\n",
          _1: /* End_of_format */0
        },
        _1: "======== BEGIN bench1 =========\n"
      });
  bench1(undefined);
  Printf.printf(/* Format */{
        _0: {
          TAG: /* String_literal */11,
          _0: "======== END bench1 =========\n\n",
          _1: /* End_of_format */0
        },
        _1: "======== END bench1 =========\n\n"
      });
  var C = Components$Graph.Make({
        V: G.V,
        iter_vertex: G.iter_vertex,
        iter_succ: G.iter_succ
      });
  var bench2 = function (param) {
    for(var i = 1; i <= 100; ++i){
      var v = Math.imul(i, i);
      var d = Random.$$float(1.0);
      var x = d * (v - 1.0);
      var e = x * x | 0;
      var g = Curry._4(R.graph, undefined, v, e, undefined);
      var match = utime(C.scc, g);
      Curry._5(Format.printf(/* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "i = ",
                  _1: {
                    TAG: /* Int */4,
                    _0: /* Int_d */0,
                    _1: /* No_padding */0,
                    _2: /* No_precision */0,
                    _3: {
                      TAG: /* String_literal */11,
                      _0: " v = ",
                      _1: {
                        TAG: /* Int */4,
                        _0: /* Int_d */0,
                        _1: /* No_padding */0,
                        _2: /* No_precision */0,
                        _3: {
                          TAG: /* String_literal */11,
                          _0: " e = ",
                          _1: {
                            TAG: /* Int */4,
                            _0: /* Int_d */0,
                            _1: /* No_padding */0,
                            _2: /* No_precision */0,
                            _3: {
                              TAG: /* String_literal */11,
                              _0: " d = ",
                              _1: {
                                TAG: /* Float */8,
                                _0: /* Float_f */0,
                                _1: {
                                  TAG: /* Lit_padding */0,
                                  _0: /* Right */1,
                                  _1: 1
                                },
                                _2: /* Lit_precision */{
                                  _0: 2
                                },
                                _3: {
                                  TAG: /* String_literal */11,
                                  _0: " time = ",
                                  _1: {
                                    TAG: /* Float */8,
                                    _0: /* Float_f */0,
                                    _1: {
                                      TAG: /* Lit_padding */0,
                                      _0: /* Right */1,
                                      _1: 2
                                    },
                                    _2: /* Lit_precision */{
                                      _0: 2
                                    },
                                    _3: {
                                      TAG: /* Formatting_lit */17,
                                      _0: /* Flush_newline */4,
                                      _1: /* End_of_format */0
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                _1: "i = %d v = %d e = %d d = %1.2f time = %2.2f@."
              }), i, v, e, d, match[1]);
    }
    
  };
  Printf.printf(/* Format */{
        _0: {
          TAG: /* String_literal */11,
          _0: "======== BEGIN bench2 =========\n",
          _1: /* End_of_format */0
        },
        _1: "======== BEGIN bench2 =========\n"
      });
  bench2(undefined);
  Printf.printf(/* Format */{
        _0: {
          TAG: /* String_literal */11,
          _0: "======== END bench2 =========\n\n",
          _1: /* End_of_format */0
        },
        _1: "======== END bench2 =========\n\n"
      });
  return {
          R: R,
          Dfs: Dfs,
          has_cycle: has_cycle,
          bench1: bench1,
          C: C,
          bench2: bench2
        };
}

var partial_arg_V = Pack$Graph.Digraph.V;

var partial_arg_is_directed = Pack$Graph.Digraph.is_directed;

var partial_arg_iter_vertex = Pack$Graph.Digraph.iter_vertex;

var partial_arg_fold_vertex = Pack$Graph.Digraph.fold_vertex;

var partial_arg_iter_succ = Pack$Graph.Digraph.iter_succ;

var partial_arg_fold_succ = Pack$Graph.Digraph.fold_succ;

var B = Builder$Graph.I({
      V: Pack$Graph.Digraph.V,
      E: Pack$Graph.Digraph.E,
      is_directed: Pack$Graph.Digraph.is_directed,
      is_empty: Pack$Graph.Digraph.is_empty,
      nb_vertex: Pack$Graph.Digraph.nb_vertex,
      nb_edges: Pack$Graph.Digraph.nb_edges,
      out_degree: Pack$Graph.Digraph.out_degree,
      in_degree: Pack$Graph.Digraph.in_degree,
      mem_vertex: Pack$Graph.Digraph.mem_vertex,
      mem_edge: Pack$Graph.Digraph.mem_edge,
      mem_edge_e: Pack$Graph.Digraph.mem_edge_e,
      find_edge: Pack$Graph.Digraph.find_edge,
      find_all_edges: Pack$Graph.Digraph.find_all_edges,
      succ: Pack$Graph.Digraph.succ,
      pred: Pack$Graph.Digraph.pred,
      succ_e: Pack$Graph.Digraph.succ_e,
      pred_e: Pack$Graph.Digraph.pred_e,
      iter_vertex: Pack$Graph.Digraph.iter_vertex,
      fold_vertex: Pack$Graph.Digraph.fold_vertex,
      iter_edges: Pack$Graph.Digraph.iter_edges,
      fold_edges: Pack$Graph.Digraph.fold_edges,
      iter_edges_e: Pack$Graph.Digraph.iter_edges_e,
      fold_edges_e: Pack$Graph.Digraph.fold_edges_e,
      map_vertex: Pack$Graph.Digraph.map_vertex,
      iter_succ: Pack$Graph.Digraph.iter_succ,
      iter_pred: Pack$Graph.Digraph.iter_pred,
      fold_succ: Pack$Graph.Digraph.fold_succ,
      fold_pred: Pack$Graph.Digraph.fold_pred,
      iter_succ_e: Pack$Graph.Digraph.iter_succ_e,
      fold_succ_e: Pack$Graph.Digraph.fold_succ_e,
      iter_pred_e: Pack$Graph.Digraph.iter_pred_e,
      fold_pred_e: Pack$Graph.Digraph.fold_pred_e,
      create: Pack$Graph.Digraph.create,
      clear: Pack$Graph.Digraph.clear,
      copy: Pack$Graph.Digraph.copy,
      add_vertex: Pack$Graph.Digraph.add_vertex,
      remove_vertex: Pack$Graph.Digraph.remove_vertex,
      add_edge: Pack$Graph.Digraph.add_edge,
      add_edge_e: Pack$Graph.Digraph.add_edge_e,
      remove_edge: Pack$Graph.Digraph.remove_edge,
      remove_edge_e: Pack$Graph.Digraph.remove_edge_e
    });

var R = Rand$Graph.Make(B);

var Dfs = Traverse$Graph.Dfs({
      is_directed: partial_arg_is_directed,
      V: partial_arg_V,
      iter_vertex: partial_arg_iter_vertex,
      fold_vertex: partial_arg_fold_vertex,
      iter_succ: partial_arg_iter_succ,
      fold_succ: partial_arg_fold_succ
    });

function has_cycle(v, e) {
  var g = Curry._4(R.graph, undefined, v, e, undefined);
  var match = utime(Dfs.has_cycle, g);
  var b = match[0];
  Curry._4(Format.printf(/* Format */{
            _0: {
              TAG: /* String_literal */11,
              _0: "v = ",
              _1: {
                TAG: /* Int */4,
                _0: /* Int_d */0,
                _1: /* No_padding */0,
                _2: /* No_precision */0,
                _3: {
                  TAG: /* String_literal */11,
                  _0: " e = ",
                  _1: {
                    TAG: /* Int */4,
                    _0: /* Int_d */0,
                    _1: /* No_padding */0,
                    _2: /* No_precision */0,
                    _3: {
                      TAG: /* String_literal */11,
                      _0: " cycle = ",
                      _1: {
                        TAG: /* Bool */9,
                        _0: /* No_padding */0,
                        _1: {
                          TAG: /* String_literal */11,
                          _0: " time = ",
                          _1: {
                            TAG: /* Float */8,
                            _0: /* Float_f */0,
                            _1: {
                              TAG: /* Lit_padding */0,
                              _0: /* Right */1,
                              _1: 2
                            },
                            _2: /* Lit_precision */{
                              _0: 2
                            },
                            _3: {
                              TAG: /* Formatting_lit */17,
                              _0: /* Flush_newline */4,
                              _1: /* End_of_format */0
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            _1: "v = %d e = %d cycle = %b time = %2.2f@."
          }), v, e, b, match[1]);
  return b;
}

function bench1(param) {
  var e = 1;
  while(!has_cycle(20000, e)) {
    e = (e << 1);
  };
  
}

Printf.printf(/* Format */{
      _0: {
        TAG: /* String_literal */11,
        _0: "======== BEGIN bench1 =========\n",
        _1: /* End_of_format */0
      },
      _1: "======== BEGIN bench1 =========\n"
    });

bench1(undefined);

Printf.printf(/* Format */{
      _0: {
        TAG: /* String_literal */11,
        _0: "======== END bench1 =========\n\n",
        _1: /* End_of_format */0
      },
      _1: "======== END bench1 =========\n\n"
    });

var C = Components$Graph.Make({
      V: partial_arg_V,
      iter_vertex: partial_arg_iter_vertex,
      iter_succ: partial_arg_iter_succ
    });

function bench2(param) {
  for(var i = 1; i <= 100; ++i){
    var v = Math.imul(i, i);
    var d = Random.$$float(1.0);
    var x = d * (v - 1.0);
    var e = x * x | 0;
    var g = Curry._4(R.graph, undefined, v, e, undefined);
    var match = utime(C.scc, g);
    Curry._5(Format.printf(/* Format */{
              _0: {
                TAG: /* String_literal */11,
                _0: "i = ",
                _1: {
                  TAG: /* Int */4,
                  _0: /* Int_d */0,
                  _1: /* No_padding */0,
                  _2: /* No_precision */0,
                  _3: {
                    TAG: /* String_literal */11,
                    _0: " v = ",
                    _1: {
                      TAG: /* Int */4,
                      _0: /* Int_d */0,
                      _1: /* No_padding */0,
                      _2: /* No_precision */0,
                      _3: {
                        TAG: /* String_literal */11,
                        _0: " e = ",
                        _1: {
                          TAG: /* Int */4,
                          _0: /* Int_d */0,
                          _1: /* No_padding */0,
                          _2: /* No_precision */0,
                          _3: {
                            TAG: /* String_literal */11,
                            _0: " d = ",
                            _1: {
                              TAG: /* Float */8,
                              _0: /* Float_f */0,
                              _1: {
                                TAG: /* Lit_padding */0,
                                _0: /* Right */1,
                                _1: 1
                              },
                              _2: /* Lit_precision */{
                                _0: 2
                              },
                              _3: {
                                TAG: /* String_literal */11,
                                _0: " time = ",
                                _1: {
                                  TAG: /* Float */8,
                                  _0: /* Float_f */0,
                                  _1: {
                                    TAG: /* Lit_padding */0,
                                    _0: /* Right */1,
                                    _1: 2
                                  },
                                  _2: /* Lit_precision */{
                                    _0: 2
                                  },
                                  _3: {
                                    TAG: /* Formatting_lit */17,
                                    _0: /* Flush_newline */4,
                                    _1: /* End_of_format */0
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              _1: "i = %d v = %d e = %d d = %1.2f time = %2.2f@."
            }), i, v, e, d, match[1]);
  }
  
}

Printf.printf(/* Format */{
      _0: {
        TAG: /* String_literal */11,
        _0: "======== BEGIN bench2 =========\n",
        _1: /* End_of_format */0
      },
      _1: "======== BEGIN bench2 =========\n"
    });

bench2(undefined);

Printf.printf(/* Format */{
      _0: {
        TAG: /* String_literal */11,
        _0: "======== END bench2 =========\n\n",
        _1: /* End_of_format */0
      },
      _1: "======== END bench2 =========\n\n"
    });

var B1 = {
  R: R,
  Dfs: Dfs,
  has_cycle: has_cycle,
  bench1: bench1,
  C: C,
  bench2: bench2
};

export {
  Time ,
  Bench ,
  B1 ,
  
}
/* B Not a pure module */
