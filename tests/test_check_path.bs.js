// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "rescript/lib/es6/list.js";
import * as $$Array from "rescript/lib/es6/array.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Format from "rescript/lib/es6/format.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as Pack$Graph from "../src/pack.bs.js";

function test(n, edges) {
  var v = $$Array.init(n, Pack$Graph.Digraph.V.create);
  var g = Curry._2(Pack$Graph.Digraph.create, undefined, undefined);
  $$Array.iter(Curry._1(Pack$Graph.Digraph.add_vertex, g), v);
  var build = function (param) {
    return Curry._3(Pack$Graph.Digraph.add_edge, g, Caml_array.get(v, param[0]), Caml_array.get(v, param[1]));
  };
  List.iter(build, edges);
  var path = Curry._1(Pack$Graph.Digraph.PathCheck.check_path, Curry._1(Pack$Graph.Digraph.PathCheck.create, g));
  for(var i = 0; i < n; ++i){
    var seen = Caml_array.make(n, false);
    var pre = (function(seen){
    return function pre(v) {
      return Caml_array.set(seen, Curry._1(Pack$Graph.Digraph.V.label, v), true);
    }
    }(seen));
    Curry._3(Pack$Graph.Digraph.Dfs.prefix_component, pre, g, Caml_array.get(v, i));
    for(var j = 0; j < n; ++j){
      if (Caml_array.get(seen, j) !== Curry._2(path, Caml_array.get(v, i), Caml_array.get(v, j))) {
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "test_check_path.ml",
                20,
                6
              ],
              Error: new Error()
            };
      }
      
    }
  }
  
}

test(3, {
      hd: [
        0,
        1
      ],
      tl: {
        hd: [
          1,
          2
        ],
        tl: /* [] */0
      }
    });

test(3, /* [] */0);

test(1, {
      hd: [
        0,
        0
      ],
      tl: /* [] */0
    });

test(2, {
      hd: [
        0,
        1
      ],
      tl: {
        hd: [
          1,
          0
        ],
        tl: /* [] */0
      }
    });

test(3, {
      hd: [
        0,
        1
      ],
      tl: {
        hd: [
          1,
          0
        ],
        tl: /* [] */0
      }
    });

test(3, {
      hd: [
        0,
        1
      ],
      tl: {
        hd: [
          1,
          0
        ],
        tl: {
          hd: [
            1,
            2
          ],
          tl: /* [] */0
        }
      }
    });

test(3, {
      hd: [
        2,
        0
      ],
      tl: {
        hd: [
          0,
          2
        ],
        tl: {
          hd: [
            0,
            1
          ],
          tl: /* [] */0
        }
      }
    });

test(3, {
      hd: [
        1,
        2
      ],
      tl: {
        hd: [
          2,
          1
        ],
        tl: {
          hd: [
            2,
            0
          ],
          tl: /* [] */0
        }
      }
    });

test(5, {
      hd: [
        1,
        2
      ],
      tl: {
        hd: [
          2,
          1
        ],
        tl: {
          hd: [
            2,
            0
          ],
          tl: {
            hd: [
              3,
              4
            ],
            tl: {
              hd: [
                4,
                3
              ],
              tl: /* [] */0
            }
          }
        }
      }
    });

test(5, {
      hd: [
        1,
        2
      ],
      tl: {
        hd: [
          2,
          1
        ],
        tl: {
          hd: [
            2,
            0
          ],
          tl: {
            hd: [
              2,
              3
            ],
            tl: {
              hd: [
                3,
                4
              ],
              tl: {
                hd: [
                  4,
                  3
                ],
                tl: /* [] */0
              }
            }
          }
        }
      }
    });

test(3, {
      hd: [
        1,
        2
      ],
      tl: {
        hd: [
          2,
          1
        ],
        tl: {
          hd: [
            0,
            2
          ],
          tl: /* [] */0
        }
      }
    });

test(3, {
      hd: [
        1,
        2
      ],
      tl: {
        hd: [
          2,
          1
        ],
        tl: {
          hd: [
            0,
            1
          ],
          tl: /* [] */0
        }
      }
    });

test(4, {
      hd: [
        0,
        1
      ],
      tl: {
        hd: [
          1,
          0
        ],
        tl: {
          hd: [
            2,
            3
          ],
          tl: {
            hd: [
              3,
              2
            ],
            tl: {
              hd: [
                2,
                1
              ],
              tl: /* [] */0
            }
          }
        }
      }
    });

test(4, {
      hd: [
        0,
        1
      ],
      tl: {
        hd: [
          1,
          0
        ],
        tl: {
          hd: [
            2,
            3
          ],
          tl: {
            hd: [
              3,
              2
            ],
            tl: {
              hd: [
                1,
                2
              ],
              tl: /* [] */0
            }
          }
        }
      }
    });

test(4, {
      hd: [
        0,
        1
      ],
      tl: {
        hd: [
          1,
          0
        ],
        tl: {
          hd: [
            2,
            3
          ],
          tl: {
            hd: [
              3,
              2
            ],
            tl: {
              hd: [
                1,
                2
              ],
              tl: {
                hd: [
                  2,
                  1
                ],
                tl: /* [] */0
              }
            }
          }
        }
      }
    });

test(5, {
      hd: [
        0,
        1
      ],
      tl: {
        hd: [
          1,
          2
        ],
        tl: {
          hd: [
            2,
            0
          ],
          tl: {
            hd: [
              3,
              0
            ],
            tl: {
              hd: [
                2,
                4
              ],
              tl: /* [] */0
            }
          }
        }
      }
    });

test(7, {
      hd: [
        0,
        1
      ],
      tl: {
        hd: [
          1,
          0
        ],
        tl: {
          hd: [
            1,
            2
          ],
          tl: {
            hd: [
              2,
              3
            ],
            tl: {
              hd: [
                3,
                2
              ],
              tl: {
                hd: [
                  3,
                  4
                ],
                tl: {
                  hd: [
                    4,
                    5
                  ],
                  tl: {
                    hd: [
                      5,
                      6
                    ],
                    tl: {
                      hd: [
                        6,
                        4
                      ],
                      tl: /* [] */0
                    }
                  }
                }
              }
            }
          }
        }
      }
    });

test(7, {
      hd: [
        0,
        1
      ],
      tl: {
        hd: [
          1,
          0
        ],
        tl: {
          hd: [
            1,
            2
          ],
          tl: {
            hd: [
              2,
              3
            ],
            tl: {
              hd: [
                3,
                2
              ],
              tl: {
                hd: [
                  3,
                  4
                ],
                tl: {
                  hd: [
                    4,
                    5
                  ],
                  tl: {
                    hd: [
                      5,
                      6
                    ],
                    tl: {
                      hd: [
                        6,
                        4
                      ],
                      tl: {
                        hd: [
                          5,
                          2
                        ],
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    });

Format.printf(/* Format */{
      _0: {
        TAG: /* String_literal */11,
        _0: "test check_path: all tests succeeded.",
        _1: {
          TAG: /* Formatting_lit */17,
          _0: /* Flush_newline */4,
          _1: /* End_of_format */0
        }
      },
      _1: "test check_path: all tests succeeded.@."
    });

export {
  test ,
  
}
/*  Not a pure module */
