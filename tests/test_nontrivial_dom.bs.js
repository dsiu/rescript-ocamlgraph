// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Format from "rescript/lib/es6/format.js";
import * as Hashtbl from "rescript/lib/es6/hashtbl.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Dominator$RescriptOcamlgraph from "../src/dominator.bs.js";
import * as Imperative$RescriptOcamlgraph from "../src/imperative.bs.js";

var compare = Caml_obj.caml_compare;

var equal = Caml_obj.caml_equal;

var Int = {
  compare: compare,
  hash: Hashtbl.hash,
  equal: equal,
  $$default: 0
};

var partial_arg = Imperative$RescriptOcamlgraph.Digraph.ConcreteLabeled;

var G = partial_arg(Int, {
      compare: compare,
      $$default: 0
    });

var Dominator = Dominator$RescriptOcamlgraph.Make({
      V: G.V,
      pred: G.pred,
      succ: G.succ,
      fold_vertex: G.fold_vertex,
      iter_vertex: G.iter_vertex,
      iter_succ: G.iter_succ,
      nb_vertex: G.nb_vertex
    });

var g = Curry._2(G.create, undefined, undefined);

Curry._3(G.add_edge, g, 1, 11);

Curry._3(G.add_edge, g, 1, 2);

Curry._3(G.add_edge, g, 1, 9);

Curry._3(G.add_edge, g, 2, 3);

Curry._3(G.add_edge, g, 2, 9);

Curry._3(G.add_edge, g, 2, 10);

Curry._3(G.add_edge, g, 3, 4);

Curry._3(G.add_edge, g, 3, 5);

Curry._3(G.add_edge, g, 4, 5);

Curry._3(G.add_edge, g, 5, 6);

Curry._3(G.add_edge, g, 6, 8);

Curry._3(G.add_edge, g, 7, 6);

Curry._3(G.add_edge, g, 8, 1);

Curry._3(G.add_edge, g, 8, 10);

Curry._3(G.add_edge, g, 9, 1);

Curry._3(G.add_edge, g, 9, 7);

Curry._3(G.add_edge, g, 9, 10);

Curry._3(G.add_edge, g, 10, 1);

Curry._3(G.add_edge, g, 10, 2);

Curry._3(G.add_edge, g, 11, 1);

Curry._3(G.add_edge, g, 11, 3);

function pp_comma(p, param) {
  Format.pp_print_char(p, /* ',' */44);
  return Format.pp_print_space(p, undefined);
}

function pp_set(pf, s) {
  var partial_arg = pp_comma;
  return Curry._2(Format.fprintf(pf, /* Format */{
                  _0: {
                    TAG: /* Formatting_gen */18,
                    _0: {
                      TAG: /* Open_box */1,
                      _0: /* Format */{
                        _0: {
                          TAG: /* String_literal */11,
                          _0: "<hv 4>",
                          _1: /* End_of_format */0
                        },
                        _1: "<hv 4>"
                      }
                    },
                    _1: {
                      TAG: /* Char_literal */12,
                      _0: /* '{' */123,
                      _1: {
                        TAG: /* Alpha */15,
                        _0: {
                          TAG: /* Char_literal */12,
                          _0: /* '}' */125,
                          _1: {
                            TAG: /* Formatting_lit */17,
                            _0: /* Close_box */0,
                            _1: /* End_of_format */0
                          }
                        }
                      }
                    }
                  },
                  _1: "@[<hv 4>{%a}@]"
                }), (function (param, param$1) {
                return Format.pp_print_list(partial_arg, Format.pp_print_int, param, param$1);
              }), Curry._1(Dominator.S.elements, s));
}

var idom = Curry._2(Dominator.compute_idom, g, 1);

var domtree = Curry._2(Dominator.idom_to_dom_tree, g, idom);

var s1 = Curry._1(Dominator.S.of_list, Curry._2(Dominator.dom_tree_to_nontrivial_dom, 1, domtree));

var s2 = Curry._2(Dominator.dom_tree_to_snontrivial_dom, 1, domtree);

Curry._2(Format.printf(/* Format */{
          _0: {
            TAG: /* Formatting_gen */18,
            _0: {
              TAG: /* Open_box */1,
              _0: /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "<v>",
                  _1: /* End_of_format */0
                },
                _1: "<v>"
              }
            },
            _1: {
              TAG: /* Alpha */15,
              _0: {
                TAG: /* Formatting_lit */17,
                _0: /* Close_box */0,
                _1: {
                  TAG: /* Formatting_lit */17,
                  _0: /* Flush_newline */4,
                  _1: /* End_of_format */0
                }
              }
            }
          },
          _1: "@[<v>%a@]@."
        }), (function (param, param$1) {
        return Format.pp_print_list(undefined, pp_set, param, param$1);
      }), {
      hd: s1,
      tl: {
        hd: s2,
        tl: /* [] */0
      }
    });

export {
  Int ,
  G ,
  Dominator ,
  g ,
  pp_comma ,
  pp_set ,
  
}
/* G Not a pure module */
