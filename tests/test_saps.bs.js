// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "rescript/lib/es6/list.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Format from "rescript/lib/es6/format.js";
import * as Hashtbl from "rescript/lib/es6/hashtbl.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Builder$RescriptOcamlgraph from "../src/builder.bs.js";
import * as Components$RescriptOcamlgraph from "../src/components.bs.js";
import * as Imperative$RescriptOcamlgraph from "../src/imperative.bs.js";
import * as Persistent$RescriptOcamlgraph from "../src/persistent.bs.js";

var compare = Caml_obj.caml_compare;

var equal = Caml_obj.caml_equal;

var Int = {
  compare: compare,
  hash: Hashtbl.hash,
  equal: equal,
  $$default: 0
};

var compare$1 = Caml_obj.caml_compare;

var equal$1 = Caml_obj.caml_equal;

var $$String = {
  compare: compare$1,
  hash: Hashtbl.hash,
  equal: equal$1,
  $$default: "X"
};

var GI = Imperative$RescriptOcamlgraph.Digraph.Concrete(Int);

var CI = Components$RescriptOcamlgraph.Connectivity(Builder$RescriptOcamlgraph.I(GI));

var GS = Persistent$RescriptOcamlgraph.Digraph.ConcreteBidirectional($$String);

var CS = Components$RescriptOcamlgraph.BiConnectivity(GS);

var g1 = Curry._2(GI.create, undefined, undefined);

Curry._3(GI.add_edge, g1, 1, 2);

Curry._3(GI.add_edge, g1, 1, 3);

Curry._3(GI.add_edge, g1, 2, 3);

Curry._3(GI.add_edge, g1, 3, 1);

Curry._3(GI.add_edge, g1, 3, 4);

Curry._3(GI.add_edge, g1, 3, 6);

Curry._3(GI.add_edge, g1, 3, 7);

Curry._3(GI.add_edge, g1, 4, 5);

Curry._3(GI.add_edge, g1, 5, 1);

Curry._3(GI.add_edge, g1, 5, 2);

Curry._3(GI.add_edge, g1, 5, 4);

Curry._3(GI.add_edge, g1, 5, 7);

Curry._3(GI.add_edge, g1, 6, 5);

Curry._3(GI.add_edge, g1, 6, 7);

Curry._3(GI.add_edge, g1, 7, 6);

Curry._3(GI.add_edge, g1, 7, 5);

var g2 = Curry._2(GI.create, undefined, undefined);

Curry._3(GI.add_edge, g2, 1, 2);

Curry._3(GI.add_edge, g2, 2, 3);

Curry._3(GI.add_edge, g2, 3, 4);

Curry._3(GI.add_edge, g2, 4, 5);

Curry._3(GI.add_edge, g2, 5, 6);

Curry._3(GI.add_edge, g2, 6, 1);

var g3 = List.fold_left((function (g, param) {
        return Curry._3(GS.add_edge, g, param[0], param[1]);
      }), GS.empty, {
      hd: [
        "A",
        "B"
      ],
      tl: {
        hd: [
          "B",
          "A"
        ],
        tl: {
          hd: [
            "B",
            "E"
          ],
          tl: {
            hd: [
              "C",
              "A"
            ],
            tl: {
              hd: [
                "C",
                "B"
              ],
              tl: {
                hd: [
                  "C",
                  "D"
                ],
                tl: {
                  hd: [
                    "C",
                    "E"
                  ],
                  tl: {
                    hd: [
                      "D",
                      "C"
                    ],
                    tl: {
                      hd: [
                        "D",
                        "E"
                      ],
                      tl: {
                        hd: [
                          "E",
                          "C"
                        ],
                        tl: {
                          hd: [
                            "E",
                            "D"
                          ],
                          tl: {
                            hd: [
                              "E",
                              "J"
                            ],
                            tl: {
                              hd: [
                                "E",
                                "I"
                              ],
                              tl: {
                                hd: [
                                  "F",
                                  "D"
                                ],
                                tl: {
                                  hd: [
                                    "F",
                                    "J"
                                  ],
                                  tl: {
                                    hd: [
                                      "H",
                                      "F"
                                    ],
                                    tl: {
                                      hd: [
                                        "H",
                                        "I"
                                      ],
                                      tl: {
                                        hd: [
                                          "I",
                                          "H"
                                        ],
                                        tl: {
                                          hd: [
                                            "I",
                                            "J"
                                          ],
                                          tl: {
                                            hd: [
                                              "I",
                                              "E"
                                            ],
                                            tl: {
                                              hd: [
                                                "J",
                                                "E"
                                              ],
                                              tl: {
                                                hd: [
                                                  "J",
                                                  "F"
                                                ],
                                                tl: {
                                                  hd: [
                                                    "J",
                                                    "I"
                                                  ],
                                                  tl: /* [] */0
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    });

var g4 = Curry._2(GI.create, undefined, undefined);

Curry._3(GI.add_edge, g4, 1, 2);

Curry._3(GI.add_edge, g4, 2, 3);

Curry._3(GI.add_edge, g4, 3, 5);

Curry._3(GI.add_edge, g4, 3, 9);

Curry._3(GI.add_edge, g4, 3, 11);

Curry._3(GI.add_edge, g4, 3, 12);

Curry._3(GI.add_edge, g4, 4, 1);

Curry._3(GI.add_edge, g4, 4, 5);

Curry._3(GI.add_edge, g4, 4, 7);

Curry._3(GI.add_edge, g4, 4, 9);

Curry._3(GI.add_edge, g4, 5, 3);

Curry._3(GI.add_edge, g4, 5, 4);

Curry._3(GI.add_edge, g4, 6, 7);

Curry._3(GI.add_edge, g4, 6, 9);

Curry._3(GI.add_edge, g4, 7, 6);

Curry._3(GI.add_edge, g4, 7, 8);

Curry._3(GI.add_edge, g4, 7, 9);

Curry._3(GI.add_edge, g4, 8, 6);

Curry._3(GI.add_edge, g4, 9, 3);

Curry._3(GI.add_edge, g4, 9, 4);

Curry._3(GI.add_edge, g4, 9, 6);

Curry._3(GI.add_edge, g4, 9, 7);

Curry._3(GI.add_edge, g4, 10, 3);

Curry._3(GI.add_edge, g4, 10, 11);

Curry._3(GI.add_edge, g4, 11, 10);

Curry._3(GI.add_edge, g4, 11, 12);

Curry._3(GI.add_edge, g4, 12, 3);

Curry._3(GI.add_edge, g4, 12, 10);

Curry._3(GI.add_edge, g4, 12, 13);

Curry._3(GI.add_edge, g4, 13, 14);

Curry._3(GI.add_edge, g4, 14, 3);

Curry._3(GI.add_edge, g4, 14, 10);

var g5 = Curry._2(GI.create, undefined, undefined);

Curry._3(GI.add_edge, g5, 0, 1);

Curry._3(GI.add_edge, g5, 0, 2);

Curry._3(GI.add_edge, g5, 1, 0);

Curry._3(GI.add_edge, g5, 1, 2);

Curry._3(GI.add_edge, g5, 2, 0);

Curry._3(GI.add_edge, g5, 2, 1);

Curry._3(GI.add_edge, g5, 2, 3);

Curry._3(GI.add_edge, g5, 2, 4);

Curry._3(GI.add_edge, g5, 2, 5);

Curry._3(GI.add_edge, g5, 3, 2);

Curry._3(GI.add_edge, g5, 3, 4);

Curry._3(GI.add_edge, g5, 3, 5);

Curry._3(GI.add_edge, g5, 4, 2);

Curry._3(GI.add_edge, g5, 4, 3);

Curry._3(GI.add_edge, g5, 4, 5);

Curry._3(GI.add_edge, g5, 4, 6);

Curry._3(GI.add_edge, g5, 4, 7);

Curry._3(GI.add_edge, g5, 5, 2);

Curry._3(GI.add_edge, g5, 5, 3);

Curry._3(GI.add_edge, g5, 5, 4);

Curry._3(GI.add_edge, g5, 6, 4);

Curry._3(GI.add_edge, g5, 6, 7);

Curry._3(GI.add_edge, g5, 7, 4);

Curry._3(GI.add_edge, g5, 7, 6);

Curry._3(GI.add_edge, g5, 7, 8);

Curry._3(GI.add_edge, g5, 7, 9);

Curry._3(GI.add_edge, g5, 7, 11);

Curry._3(GI.add_edge, g5, 7, 14);

Curry._3(GI.add_edge, g5, 8, 7);

Curry._3(GI.add_edge, g5, 8, 9);

Curry._3(GI.add_edge, g5, 8, 10);

Curry._3(GI.add_edge, g5, 9, 8);

Curry._3(GI.add_edge, g5, 9, 10);

Curry._3(GI.add_edge, g5, 9, 11);

Curry._3(GI.add_edge, g5, 9, 13);

Curry._3(GI.add_edge, g5, 10, 7);

Curry._3(GI.add_edge, g5, 10, 11);

Curry._3(GI.add_edge, g5, 10, 9);

Curry._3(GI.add_edge, g5, 11, 7);

Curry._3(GI.add_edge, g5, 11, 8);

Curry._3(GI.add_edge, g5, 11, 10);

Curry._3(GI.add_edge, g5, 12, 4);

Curry._3(GI.add_edge, g5, 12, 13);

Curry._3(GI.add_edge, g5, 13, 12);

Curry._3(GI.add_edge, g5, 13, 14);

Curry._3(GI.add_edge, g5, 13, 15);

Curry._3(GI.add_edge, g5, 14, 2);

Curry._3(GI.add_edge, g5, 14, 12);

Curry._3(GI.add_edge, g5, 15, 12);

function pp_comma(p, param) {
  Format.pp_print_char(p, /* ',' */44);
  return Format.pp_print_space(p, undefined);
}

function pp_set(pp_ele, pf, s) {
  var partial_arg = pp_comma;
  return Curry._2(Format.fprintf(pf, /* Format */{
                  _0: {
                    TAG: /* Formatting_gen */18,
                    _0: {
                      TAG: /* Open_box */1,
                      _0: /* Format */{
                        _0: {
                          TAG: /* String_literal */11,
                          _0: "<hv 4>",
                          _1: /* End_of_format */0
                        },
                        _1: "<hv 4>"
                      }
                    },
                    _1: {
                      TAG: /* Char_literal */12,
                      _0: /* '{' */123,
                      _1: {
                        TAG: /* Alpha */15,
                        _0: {
                          TAG: /* Char_literal */12,
                          _0: /* '}' */125,
                          _1: {
                            TAG: /* Formatting_lit */17,
                            _0: /* Close_box */0,
                            _1: /* End_of_format */0
                          }
                        }
                      }
                    }
                  },
                  _1: "@[<hv 4>{%a}@]"
                }), (function (param, param$1) {
                return Format.pp_print_list(partial_arg, pp_ele, param, param$1);
              }), s);
}

var saps1 = Curry._1(CI.sstrong_articulation_points, g1);

var saps2 = Curry._1(CI.sstrong_articulation_points, g2);

var saps3 = Curry._1(CS.sstrong_articulation_points, g3);

var saps4 = Curry._1(CI.sstrong_articulation_points, g4);

var saps5 = Curry._1(CI.sstrong_articulation_points, g5);

Curry.app(Format.printf(/* Format */{
          _0: {
            TAG: /* Formatting_gen */18,
            _0: {
              TAG: /* Open_box */1,
              _0: /* Format */{
                _0: {
                  TAG: /* String_literal */11,
                  _0: "<v>",
                  _1: /* End_of_format */0
                },
                _1: "<v>"
              }
            },
            _1: {
              TAG: /* Alpha */15,
              _0: {
                TAG: /* Formatting_lit */17,
                _0: {
                  TAG: /* Break */0,
                  _0: "@,",
                  _1: 0,
                  _2: 0
                },
                _1: {
                  TAG: /* Alpha */15,
                  _0: {
                    TAG: /* Formatting_lit */17,
                    _0: {
                      TAG: /* Break */0,
                      _0: "@,",
                      _1: 0,
                      _2: 0
                    },
                    _1: {
                      TAG: /* Alpha */15,
                      _0: {
                        TAG: /* Formatting_lit */17,
                        _0: {
                          TAG: /* Break */0,
                          _0: "@,",
                          _1: 0,
                          _2: 0
                        },
                        _1: {
                          TAG: /* Alpha */15,
                          _0: {
                            TAG: /* Formatting_lit */17,
                            _0: {
                              TAG: /* Break */0,
                              _0: "@,",
                              _1: 0,
                              _2: 0
                            },
                            _1: {
                              TAG: /* Alpha */15,
                              _0: {
                                TAG: /* Formatting_lit */17,
                                _0: /* Close_box */0,
                                _1: {
                                  TAG: /* Formatting_lit */17,
                                  _0: /* Flush_newline */4,
                                  _1: /* End_of_format */0
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          _1: "@[<v>%a@,%a@,%a@,%a@,%a@]@."
        }), [
      (function (param, param$1) {
          return pp_set(Format.pp_print_int, param, param$1);
        }),
      Curry._1(CI.S.elements, saps1),
      (function (param, param$1) {
          return pp_set(Format.pp_print_int, param, param$1);
        }),
      Curry._1(CI.S.elements, saps2),
      (function (param, param$1) {
          return pp_set(Format.pp_print_string, param, param$1);
        }),
      Curry._1(CS.S.elements, saps3),
      (function (param, param$1) {
          return pp_set(Format.pp_print_int, param, param$1);
        }),
      Curry._1(CI.S.elements, saps4),
      (function (param, param$1) {
          return pp_set(Format.pp_print_int, param, param$1);
        }),
      Curry._1(CI.S.elements, saps5)
    ]);

export {
  Int ,
  $$String ,
  GI ,
  CI ,
  GS ,
  CS ,
  g1 ,
  g2 ,
  g3 ,
  g4 ,
  g5 ,
  pp_comma ,
  pp_set ,
  
}
/* GI Not a pure module */
