// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "rescript/lib/es6/list.js";
import * as $$Array from "rescript/lib/es6/array.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Format from "rescript/lib/es6/format.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as Pack$RescriptOcamlgraph from "../src/pack.bs.js";

function test(checkOpt, iter, n, edges) {
  var check = checkOpt !== undefined ? checkOpt : true;
  var v = $$Array.init(n, Pack$RescriptOcamlgraph.Digraph.V.create);
  var g = Curry._2(Pack$RescriptOcamlgraph.Digraph.create, undefined, undefined);
  $$Array.iter(Curry._1(Pack$RescriptOcamlgraph.Digraph.add_vertex, g), v);
  var build = function (param) {
    return Curry._3(Pack$RescriptOcamlgraph.Digraph.add_edge, g, Caml_array.get(v, param[0]), Caml_array.get(v, param[1]));
  };
  List.iter(build, edges);
  var num = Caml_array.make(n, 0);
  var i = {
    contents: 0
  };
  Curry._2(iter, (function (v) {
          i.contents = i.contents + 1 | 0;
          return Caml_array.set(num, Curry._1(Pack$RescriptOcamlgraph.Digraph.V.label, v), i.contents);
        }), g);
  var r = $$Array.init(n, (function (i) {
          return i;
        }));
  $$Array.sort((function (i, j) {
          return Caml_array.get(num, i) - Caml_array.get(num, j) | 0;
        }), r);
  var path = Curry._1(Pack$RescriptOcamlgraph.Digraph.PathCheck.check_path, Curry._1(Pack$RescriptOcamlgraph.Digraph.PathCheck.create, g));
  var check_edge = function (param) {
    var y = param[1];
    var x = param[0];
    var vx = Caml_array.get(v, x);
    var vy = Caml_array.get(v, y);
    if (!(Caml_array.get(num, x) > 0 && Caml_array.get(num, y) > 0)) {
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "test_topsort.ml",
              27,
              4
            ],
            Error: new Error()
          };
    }
    if (Caml_array.get(num, x) >= Caml_array.get(num, y) || Curry._2(path, vx, vy) || !Curry._2(path, vy, vx)) {
      return ;
    }
    throw {
          RE_EXN_ID: "Assert_failure",
          _1: [
            "test_topsort.ml",
            28,
            4
          ],
          Error: new Error()
        };
  };
  if (check) {
    for(var x = 0; x < n; ++x){
      for(var y = 0; y < n; ++y){
        check_edge([
              x,
              y
            ]);
      }
    }
  }
  
}

function tests(iter) {
  var test$1 = function (param, param$1) {
    return test(undefined, iter, param, param$1);
  };
  test$1(3, {
        hd: [
          0,
          1
        ],
        tl: {
          hd: [
            1,
            2
          ],
          tl: /* [] */0
        }
      });
  test$1(3, /* [] */0);
  test$1(1, {
        hd: [
          0,
          0
        ],
        tl: /* [] */0
      });
  test$1(2, {
        hd: [
          0,
          1
        ],
        tl: {
          hd: [
            1,
            0
          ],
          tl: /* [] */0
        }
      });
  test$1(3, {
        hd: [
          0,
          1
        ],
        tl: {
          hd: [
            1,
            0
          ],
          tl: {
            hd: [
              1,
              2
            ],
            tl: /* [] */0
          }
        }
      });
  test$1(3, {
        hd: [
          2,
          0
        ],
        tl: {
          hd: [
            0,
            2
          ],
          tl: {
            hd: [
              0,
              1
            ],
            tl: /* [] */0
          }
        }
      });
  test$1(3, {
        hd: [
          1,
          2
        ],
        tl: {
          hd: [
            2,
            1
          ],
          tl: {
            hd: [
              2,
              0
            ],
            tl: /* [] */0
          }
        }
      });
  test$1(5, {
        hd: [
          1,
          2
        ],
        tl: {
          hd: [
            2,
            1
          ],
          tl: {
            hd: [
              2,
              0
            ],
            tl: {
              hd: [
                3,
                4
              ],
              tl: {
                hd: [
                  4,
                  3
                ],
                tl: /* [] */0
              }
            }
          }
        }
      });
  test$1(3, {
        hd: [
          1,
          2
        ],
        tl: {
          hd: [
            2,
            1
          ],
          tl: {
            hd: [
              0,
              2
            ],
            tl: /* [] */0
          }
        }
      });
  test$1(3, {
        hd: [
          1,
          2
        ],
        tl: {
          hd: [
            2,
            1
          ],
          tl: {
            hd: [
              0,
              1
            ],
            tl: /* [] */0
          }
        }
      });
  test$1(4, {
        hd: [
          0,
          1
        ],
        tl: {
          hd: [
            1,
            0
          ],
          tl: {
            hd: [
              2,
              3
            ],
            tl: {
              hd: [
                3,
                2
              ],
              tl: {
                hd: [
                  2,
                  1
                ],
                tl: /* [] */0
              }
            }
          }
        }
      });
  test$1(4, {
        hd: [
          0,
          1
        ],
        tl: {
          hd: [
            1,
            0
          ],
          tl: {
            hd: [
              2,
              3
            ],
            tl: {
              hd: [
                3,
                2
              ],
              tl: {
                hd: [
                  1,
                  2
                ],
                tl: /* [] */0
              }
            }
          }
        }
      });
  test$1(4, {
        hd: [
          0,
          1
        ],
        tl: {
          hd: [
            1,
            0
          ],
          tl: {
            hd: [
              2,
              3
            ],
            tl: {
              hd: [
                3,
                2
              ],
              tl: {
                hd: [
                  1,
                  2
                ],
                tl: {
                  hd: [
                    2,
                    1
                  ],
                  tl: /* [] */0
                }
              }
            }
          }
        }
      });
  test$1(5, {
        hd: [
          0,
          1
        ],
        tl: {
          hd: [
            1,
            2
          ],
          tl: {
            hd: [
              2,
              0
            ],
            tl: {
              hd: [
                3,
                0
              ],
              tl: {
                hd: [
                  2,
                  4
                ],
                tl: /* [] */0
              }
            }
          }
        }
      });
  test$1(7, {
        hd: [
          0,
          1
        ],
        tl: {
          hd: [
            1,
            0
          ],
          tl: {
            hd: [
              1,
              2
            ],
            tl: {
              hd: [
                2,
                3
              ],
              tl: {
                hd: [
                  3,
                  2
                ],
                tl: {
                  hd: [
                    3,
                    4
                  ],
                  tl: {
                    hd: [
                      4,
                      5
                    ],
                    tl: {
                      hd: [
                        5,
                        6
                      ],
                      tl: {
                        hd: [
                          6,
                          4
                        ],
                        tl: /* [] */0
                      }
                    }
                  }
                }
              }
            }
          }
        }
      });
  test$1(7, {
        hd: [
          0,
          1
        ],
        tl: {
          hd: [
            1,
            0
          ],
          tl: {
            hd: [
              1,
              2
            ],
            tl: {
              hd: [
                2,
                3
              ],
              tl: {
                hd: [
                  3,
                  2
                ],
                tl: {
                  hd: [
                    3,
                    4
                  ],
                  tl: {
                    hd: [
                      4,
                      5
                    ],
                    tl: {
                      hd: [
                        5,
                        6
                      ],
                      tl: {
                        hd: [
                          6,
                          4
                        ],
                        tl: {
                          hd: [
                            5,
                            2
                          ],
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      });
  return Format.printf(/* Format */{
              _0: {
                TAG: /* String_literal */11,
                _0: "test topsort: all tests succeeded.",
                _1: {
                  TAG: /* Formatting_lit */17,
                  _0: /* Flush_newline */4,
                  _1: /* End_of_format */0
                }
              },
              _1: "test topsort: all tests succeeded.@."
            });
}

tests(Pack$RescriptOcamlgraph.Digraph.Topological.iter);

function pow(a, n) {
  if (n === 0) {
    return 1;
  }
  if (n === 1) {
    return a;
  }
  var b = pow(a, n / 2 | 0);
  return Math.imul(Math.imul(b, b), n % 2 === 0 ? 1 : a);
}

for(var n_iter = 0; n_iter <= 5; ++n_iter){
  var n = pow(10, n_iter);
  var el = /* [] */0;
  el = {
    hd: [
      n - 1 | 0,
      0
    ],
    tl: /* [] */0
  };
  for(var i = 0 ,i_finish = n - 2 | 0; i <= i_finish; ++i){
    el = {
      hd: [
        i,
        i + 1 | 0
      ],
      tl: el
    };
  }
  test(false, Pack$RescriptOcamlgraph.Digraph.Topological.iter, n, el);
}

export {
  test ,
  tests ,
  pow ,
  
}
/*  Not a pure module */
